# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mqtt_comm/resp_agvstate.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class resp_agvstate(genpy.Message):
  _md5sum = "9afde21e9d1bc354804e4cf18e51c787"
  _type = "mqtt_comm/resp_agvstate"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string msgType
int64 timestamp
string version

float64 mileage
float64 batterySOH
float64 batterySOC
float64 batteryVoltage
float64 batteryCurrent
int32 batterytemperature
int32 charge_state

float32 vehSpeed    
float32 pointHA
float64 pointX
float64 pointY
string workPointid

int32 steerControlMode
int32 vehCtrlMode	
int32 autoDriveEnable	

float32 pitchAngle
float32 azimuthAngle

string taskId
int32 taskStatus
string errCode

"""
  __slots__ = ['msgType','timestamp','version','mileage','batterySOH','batterySOC','batteryVoltage','batteryCurrent','batterytemperature','charge_state','vehSpeed','pointHA','pointX','pointY','workPointid','steerControlMode','vehCtrlMode','autoDriveEnable','pitchAngle','azimuthAngle','taskId','taskStatus','errCode']
  _slot_types = ['string','int64','string','float64','float64','float64','float64','float64','int32','int32','float32','float32','float64','float64','string','int32','int32','int32','float32','float32','string','int32','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       msgType,timestamp,version,mileage,batterySOH,batterySOC,batteryVoltage,batteryCurrent,batterytemperature,charge_state,vehSpeed,pointHA,pointX,pointY,workPointid,steerControlMode,vehCtrlMode,autoDriveEnable,pitchAngle,azimuthAngle,taskId,taskStatus,errCode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(resp_agvstate, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.msgType is None:
        self.msgType = ''
      if self.timestamp is None:
        self.timestamp = 0
      if self.version is None:
        self.version = ''
      if self.mileage is None:
        self.mileage = 0.
      if self.batterySOH is None:
        self.batterySOH = 0.
      if self.batterySOC is None:
        self.batterySOC = 0.
      if self.batteryVoltage is None:
        self.batteryVoltage = 0.
      if self.batteryCurrent is None:
        self.batteryCurrent = 0.
      if self.batterytemperature is None:
        self.batterytemperature = 0
      if self.charge_state is None:
        self.charge_state = 0
      if self.vehSpeed is None:
        self.vehSpeed = 0.
      if self.pointHA is None:
        self.pointHA = 0.
      if self.pointX is None:
        self.pointX = 0.
      if self.pointY is None:
        self.pointY = 0.
      if self.workPointid is None:
        self.workPointid = ''
      if self.steerControlMode is None:
        self.steerControlMode = 0
      if self.vehCtrlMode is None:
        self.vehCtrlMode = 0
      if self.autoDriveEnable is None:
        self.autoDriveEnable = 0
      if self.pitchAngle is None:
        self.pitchAngle = 0.
      if self.azimuthAngle is None:
        self.azimuthAngle = 0.
      if self.taskId is None:
        self.taskId = ''
      if self.taskStatus is None:
        self.taskStatus = 0
      if self.errCode is None:
        self.errCode = ''
    else:
      self.msgType = ''
      self.timestamp = 0
      self.version = ''
      self.mileage = 0.
      self.batterySOH = 0.
      self.batterySOC = 0.
      self.batteryVoltage = 0.
      self.batteryCurrent = 0.
      self.batterytemperature = 0
      self.charge_state = 0
      self.vehSpeed = 0.
      self.pointHA = 0.
      self.pointX = 0.
      self.pointY = 0.
      self.workPointid = ''
      self.steerControlMode = 0
      self.vehCtrlMode = 0
      self.autoDriveEnable = 0
      self.pitchAngle = 0.
      self.azimuthAngle = 0.
      self.taskId = ''
      self.taskStatus = 0
      self.errCode = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.msgType
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.timestamp
      buff.write(_get_struct_q().pack(_x))
      _x = self.version
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5d2i2f2d().pack(_x.mileage, _x.batterySOH, _x.batterySOC, _x.batteryVoltage, _x.batteryCurrent, _x.batterytemperature, _x.charge_state, _x.vehSpeed, _x.pointHA, _x.pointX, _x.pointY))
      _x = self.workPointid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3i2f().pack(_x.steerControlMode, _x.vehCtrlMode, _x.autoDriveEnable, _x.pitchAngle, _x.azimuthAngle))
      _x = self.taskId
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.taskStatus
      buff.write(_get_struct_i().pack(_x))
      _x = self.errCode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.msgType = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.msgType = str[start:end]
      start = end
      end += 8
      (self.timestamp,) = _get_struct_q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.version = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.version = str[start:end]
      _x = self
      start = end
      end += 72
      (_x.mileage, _x.batterySOH, _x.batterySOC, _x.batteryVoltage, _x.batteryCurrent, _x.batterytemperature, _x.charge_state, _x.vehSpeed, _x.pointHA, _x.pointX, _x.pointY,) = _get_struct_5d2i2f2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.workPointid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.workPointid = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.steerControlMode, _x.vehCtrlMode, _x.autoDriveEnable, _x.pitchAngle, _x.azimuthAngle,) = _get_struct_3i2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.taskId = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.taskId = str[start:end]
      start = end
      end += 4
      (self.taskStatus,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.errCode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.errCode = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.msgType
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.timestamp
      buff.write(_get_struct_q().pack(_x))
      _x = self.version
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5d2i2f2d().pack(_x.mileage, _x.batterySOH, _x.batterySOC, _x.batteryVoltage, _x.batteryCurrent, _x.batterytemperature, _x.charge_state, _x.vehSpeed, _x.pointHA, _x.pointX, _x.pointY))
      _x = self.workPointid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3i2f().pack(_x.steerControlMode, _x.vehCtrlMode, _x.autoDriveEnable, _x.pitchAngle, _x.azimuthAngle))
      _x = self.taskId
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.taskStatus
      buff.write(_get_struct_i().pack(_x))
      _x = self.errCode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.msgType = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.msgType = str[start:end]
      start = end
      end += 8
      (self.timestamp,) = _get_struct_q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.version = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.version = str[start:end]
      _x = self
      start = end
      end += 72
      (_x.mileage, _x.batterySOH, _x.batterySOC, _x.batteryVoltage, _x.batteryCurrent, _x.batterytemperature, _x.charge_state, _x.vehSpeed, _x.pointHA, _x.pointX, _x.pointY,) = _get_struct_5d2i2f2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.workPointid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.workPointid = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.steerControlMode, _x.vehCtrlMode, _x.autoDriveEnable, _x.pitchAngle, _x.azimuthAngle,) = _get_struct_3i2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.taskId = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.taskId = str[start:end]
      start = end
      end += 4
      (self.taskStatus,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.errCode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.errCode = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3i2f = None
def _get_struct_3i2f():
    global _struct_3i2f
    if _struct_3i2f is None:
        _struct_3i2f = struct.Struct("<3i2f")
    return _struct_3i2f
_struct_5d2i2f2d = None
def _get_struct_5d2i2f2d():
    global _struct_5d2i2f2d
    if _struct_5d2i2f2d is None:
        _struct_5d2i2f2d = struct.Struct("<5d2i2f2d")
    return _struct_5d2i2f2d
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_q = None
def _get_struct_q():
    global _struct_q
    if _struct_q is None:
        _struct_q = struct.Struct("<q")
    return _struct_q
