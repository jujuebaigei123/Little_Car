# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mqtt_comm/path_point.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import mqtt_comm.msg

class path_point(genpy.Message):
  _md5sum = "8db6d631c8eb6e7558d6959de9b84eeb"
  _type = "mqtt_comm/path_point"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 vehSpeed
float64 pointX
float64 pointY
float64 pointHA
bool actEnable
string caption
path_point_action[] actions
float32[] if_point1
float32[] if_point2



================================================================================
MSG: mqtt_comm/path_point_action
string caption
float32[] params


"""
  __slots__ = ['vehSpeed','pointX','pointY','pointHA','actEnable','caption','actions','if_point1','if_point2']
  _slot_types = ['float32','float64','float64','float64','bool','string','mqtt_comm/path_point_action[]','float32[]','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       vehSpeed,pointX,pointY,pointHA,actEnable,caption,actions,if_point1,if_point2

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(path_point, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.vehSpeed is None:
        self.vehSpeed = 0.
      if self.pointX is None:
        self.pointX = 0.
      if self.pointY is None:
        self.pointY = 0.
      if self.pointHA is None:
        self.pointHA = 0.
      if self.actEnable is None:
        self.actEnable = False
      if self.caption is None:
        self.caption = ''
      if self.actions is None:
        self.actions = []
      if self.if_point1 is None:
        self.if_point1 = []
      if self.if_point2 is None:
        self.if_point2 = []
    else:
      self.vehSpeed = 0.
      self.pointX = 0.
      self.pointY = 0.
      self.pointHA = 0.
      self.actEnable = False
      self.caption = ''
      self.actions = []
      self.if_point1 = []
      self.if_point2 = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_f3dB().pack(_x.vehSpeed, _x.pointX, _x.pointY, _x.pointHA, _x.actEnable))
      _x = self.caption
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.actions)
      buff.write(_struct_I.pack(length))
      for val1 in self.actions:
        _x = val1.caption
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.params)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.params))
      length = len(self.if_point1)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.if_point1))
      length = len(self.if_point2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.if_point2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.actions is None:
        self.actions = None
      end = 0
      _x = self
      start = end
      end += 29
      (_x.vehSpeed, _x.pointX, _x.pointY, _x.pointHA, _x.actEnable,) = _get_struct_f3dB().unpack(str[start:end])
      self.actEnable = bool(self.actEnable)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.caption = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.caption = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.actions = []
      for i in range(0, length):
        val1 = mqtt_comm.msg.path_point_action()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.caption = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.caption = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.params = s.unpack(str[start:end])
        self.actions.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.if_point1 = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.if_point2 = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_f3dB().pack(_x.vehSpeed, _x.pointX, _x.pointY, _x.pointHA, _x.actEnable))
      _x = self.caption
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.actions)
      buff.write(_struct_I.pack(length))
      for val1 in self.actions:
        _x = val1.caption
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.params)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.params.tostring())
      length = len(self.if_point1)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.if_point1.tostring())
      length = len(self.if_point2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.if_point2.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.actions is None:
        self.actions = None
      end = 0
      _x = self
      start = end
      end += 29
      (_x.vehSpeed, _x.pointX, _x.pointY, _x.pointHA, _x.actEnable,) = _get_struct_f3dB().unpack(str[start:end])
      self.actEnable = bool(self.actEnable)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.caption = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.caption = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.actions = []
      for i in range(0, length):
        val1 = mqtt_comm.msg.path_point_action()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.caption = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.caption = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.params = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.actions.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.if_point1 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.if_point2 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_f3dB = None
def _get_struct_f3dB():
    global _struct_f3dB
    if _struct_f3dB is None:
        _struct_f3dB = struct.Struct("<f3dB")
    return _struct_f3dB
