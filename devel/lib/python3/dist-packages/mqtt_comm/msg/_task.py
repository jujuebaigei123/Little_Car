# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mqtt_comm/task.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import mqtt_comm.msg

class task(genpy.Message):
  _md5sum = "56ba4c02399269a508181e421f1e9b96"
  _type = "mqtt_comm/task"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """time stamp
string taskId
string cmd
string subcmd
bool final_path
bool only_akm
bool accordingPathdir
path_point[] path



================================================================================
MSG: mqtt_comm/path_point
float32 vehSpeed
float64 pointX
float64 pointY
float64 pointHA
bool actEnable
string caption
path_point_action[] actions
float32[] if_point1
float32[] if_point2



================================================================================
MSG: mqtt_comm/path_point_action
string caption
float32[] params


"""
  __slots__ = ['stamp','taskId','cmd','subcmd','final_path','only_akm','accordingPathdir','path']
  _slot_types = ['time','string','string','string','bool','bool','bool','mqtt_comm/path_point[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stamp,taskId,cmd,subcmd,final_path,only_akm,accordingPathdir,path

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(task, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.taskId is None:
        self.taskId = ''
      if self.cmd is None:
        self.cmd = ''
      if self.subcmd is None:
        self.subcmd = ''
      if self.final_path is None:
        self.final_path = False
      if self.only_akm is None:
        self.only_akm = False
      if self.accordingPathdir is None:
        self.accordingPathdir = False
      if self.path is None:
        self.path = []
    else:
      self.stamp = genpy.Time()
      self.taskId = ''
      self.cmd = ''
      self.subcmd = ''
      self.final_path = False
      self.only_akm = False
      self.accordingPathdir = False
      self.path = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.stamp.secs, _x.stamp.nsecs))
      _x = self.taskId
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.cmd
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.subcmd
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3B().pack(_x.final_path, _x.only_akm, _x.accordingPathdir))
      length = len(self.path)
      buff.write(_struct_I.pack(length))
      for val1 in self.path:
        _x = val1
        buff.write(_get_struct_f3dB().pack(_x.vehSpeed, _x.pointX, _x.pointY, _x.pointHA, _x.actEnable))
        _x = val1.caption
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.actions)
        buff.write(_struct_I.pack(length))
        for val2 in val1.actions:
          _x = val2.caption
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(val2.params)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(struct.Struct(pattern).pack(*val2.params))
        length = len(val1.if_point1)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.if_point1))
        length = len(val1.if_point2)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.if_point2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.path is None:
        self.path = None
      end = 0
      _x = self
      start = end
      end += 8
      (_x.stamp.secs, _x.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.taskId = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.taskId = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cmd = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.cmd = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.subcmd = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.subcmd = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.final_path, _x.only_akm, _x.accordingPathdir,) = _get_struct_3B().unpack(str[start:end])
      self.final_path = bool(self.final_path)
      self.only_akm = bool(self.only_akm)
      self.accordingPathdir = bool(self.accordingPathdir)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path = []
      for i in range(0, length):
        val1 = mqtt_comm.msg.path_point()
        _x = val1
        start = end
        end += 29
        (_x.vehSpeed, _x.pointX, _x.pointY, _x.pointHA, _x.actEnable,) = _get_struct_f3dB().unpack(str[start:end])
        val1.actEnable = bool(val1.actEnable)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.caption = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.caption = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.actions = []
        for i in range(0, length):
          val2 = mqtt_comm.msg.path_point_action()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.caption = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.caption = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.params = s.unpack(str[start:end])
          val1.actions.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.if_point1 = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.if_point2 = s.unpack(str[start:end])
        self.path.append(val1)
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.stamp.secs, _x.stamp.nsecs))
      _x = self.taskId
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.cmd
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.subcmd
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3B().pack(_x.final_path, _x.only_akm, _x.accordingPathdir))
      length = len(self.path)
      buff.write(_struct_I.pack(length))
      for val1 in self.path:
        _x = val1
        buff.write(_get_struct_f3dB().pack(_x.vehSpeed, _x.pointX, _x.pointY, _x.pointHA, _x.actEnable))
        _x = val1.caption
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.actions)
        buff.write(_struct_I.pack(length))
        for val2 in val1.actions:
          _x = val2.caption
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(val2.params)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(val2.params.tostring())
        length = len(val1.if_point1)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.if_point1.tostring())
        length = len(val1.if_point2)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.if_point2.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.path is None:
        self.path = None
      end = 0
      _x = self
      start = end
      end += 8
      (_x.stamp.secs, _x.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.taskId = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.taskId = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cmd = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.cmd = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.subcmd = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.subcmd = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.final_path, _x.only_akm, _x.accordingPathdir,) = _get_struct_3B().unpack(str[start:end])
      self.final_path = bool(self.final_path)
      self.only_akm = bool(self.only_akm)
      self.accordingPathdir = bool(self.accordingPathdir)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path = []
      for i in range(0, length):
        val1 = mqtt_comm.msg.path_point()
        _x = val1
        start = end
        end += 29
        (_x.vehSpeed, _x.pointX, _x.pointY, _x.pointHA, _x.actEnable,) = _get_struct_f3dB().unpack(str[start:end])
        val1.actEnable = bool(val1.actEnable)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.caption = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.caption = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.actions = []
        for i in range(0, length):
          val2 = mqtt_comm.msg.path_point_action()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.caption = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.caption = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.params = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
          val1.actions.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.if_point1 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.if_point2 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.path.append(val1)
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
_struct_f3dB = None
def _get_struct_f3dB():
    global _struct_f3dB
    if _struct_f3dB is None:
        _struct_f3dB = struct.Struct("<f3dB")
    return _struct_f3dB
