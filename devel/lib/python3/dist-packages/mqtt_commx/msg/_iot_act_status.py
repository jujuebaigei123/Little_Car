# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mqtt_commx/iot_act_status.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import mqtt_commx.msg

class iot_act_status(genpy.Message):
  _md5sum = "cd9100d9e84b9bf263922df0a9c28149"
  _type = "mqtt_commx/iot_act_status"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """act_status[]  all_status
int64 timestamp
================================================================================
MSG: mqtt_commx/act_status
cmd_Header header
Point point
fault_info[]  faults

int64 act_type
int64 chassis_total_hour
float64 distance_to_target
int64 drv_direction
bool empty
bool estop
int64 firm_error_status
int64 frame_ts
int64 gear
bool in_high_voltage    # 取车状态
bool is_charging
int64 mileage
int64 motion_mode
string navi_id
int64 operational_status
int64 platform_state
int64 soc
int64 soh
float64 speed
int64 state_flow
string sub_target
string target
string task_id
int64 task_mode
int64 task_type
int64 turn_light
int64 vehicle_error_status
string vin

================================================================================
MSG: mqtt_commx/cmd_Header
string trace_id
string trans_id
string che_id
string timestamp
string version
================================================================================
MSG: mqtt_commx/Point
float64 x
float64 y
float64 yaw
float64 z

================================================================================
MSG: mqtt_commx/fault_info
string desc
int64 code
int32 level
"""
  __slots__ = ['all_status','timestamp']
  _slot_types = ['mqtt_commx/act_status[]','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       all_status,timestamp

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(iot_act_status, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.all_status is None:
        self.all_status = []
      if self.timestamp is None:
        self.timestamp = 0
    else:
      self.all_status = []
      self.timestamp = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.all_status)
      buff.write(_struct_I.pack(length))
      for val1 in self.all_status:
        _v1 = val1.header
        _x = _v1.trace_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v1.trans_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v1.che_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v1.timestamp
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v1.version
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v2 = val1.point
        _x = _v2
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.yaw, _x.z))
        length = len(val1.faults)
        buff.write(_struct_I.pack(length))
        for val2 in val1.faults:
          _x = val2.desc
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2
          buff.write(_get_struct_qi().pack(_x.code, _x.level))
        _x = val1
        buff.write(_get_struct_2qdq2B3q2B2q().pack(_x.act_type, _x.chassis_total_hour, _x.distance_to_target, _x.drv_direction, _x.empty, _x.estop, _x.firm_error_status, _x.frame_ts, _x.gear, _x.in_high_voltage, _x.is_charging, _x.mileage, _x.motion_mode))
        _x = val1.navi_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_4qdq().pack(_x.operational_status, _x.platform_state, _x.soc, _x.soh, _x.speed, _x.state_flow))
        _x = val1.sub_target
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.target
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.task_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_4q().pack(_x.task_mode, _x.task_type, _x.turn_light, _x.vehicle_error_status))
        _x = val1.vin
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.timestamp
      buff.write(_get_struct_q().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.all_status is None:
        self.all_status = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.all_status = []
      for i in range(0, length):
        val1 = mqtt_commx.msg.act_status()
        _v3 = val1.header
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v3.trace_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v3.trace_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v3.trans_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v3.trans_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v3.che_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v3.che_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v3.timestamp = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v3.timestamp = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v3.version = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v3.version = str[start:end]
        _v4 = val1.point
        _x = _v4
        start = end
        end += 32
        (_x.x, _x.y, _x.yaw, _x.z,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.faults = []
        for i in range(0, length):
          val2 = mqtt_commx.msg.fault_info()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.desc = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.desc = str[start:end]
          _x = val2
          start = end
          end += 12
          (_x.code, _x.level,) = _get_struct_qi().unpack(str[start:end])
          val1.faults.append(val2)
        _x = val1
        start = end
        end += 76
        (_x.act_type, _x.chassis_total_hour, _x.distance_to_target, _x.drv_direction, _x.empty, _x.estop, _x.firm_error_status, _x.frame_ts, _x.gear, _x.in_high_voltage, _x.is_charging, _x.mileage, _x.motion_mode,) = _get_struct_2qdq2B3q2B2q().unpack(str[start:end])
        val1.empty = bool(val1.empty)
        val1.estop = bool(val1.estop)
        val1.in_high_voltage = bool(val1.in_high_voltage)
        val1.is_charging = bool(val1.is_charging)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.navi_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.navi_id = str[start:end]
        _x = val1
        start = end
        end += 48
        (_x.operational_status, _x.platform_state, _x.soc, _x.soh, _x.speed, _x.state_flow,) = _get_struct_4qdq().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.sub_target = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.sub_target = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.target = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.target = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.task_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.task_id = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.task_mode, _x.task_type, _x.turn_light, _x.vehicle_error_status,) = _get_struct_4q().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.vin = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.vin = str[start:end]
        self.all_status.append(val1)
      start = end
      end += 8
      (self.timestamp,) = _get_struct_q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.all_status)
      buff.write(_struct_I.pack(length))
      for val1 in self.all_status:
        _v5 = val1.header
        _x = _v5.trace_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v5.trans_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v5.che_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v5.timestamp
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v5.version
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v6 = val1.point
        _x = _v6
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.yaw, _x.z))
        length = len(val1.faults)
        buff.write(_struct_I.pack(length))
        for val2 in val1.faults:
          _x = val2.desc
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2
          buff.write(_get_struct_qi().pack(_x.code, _x.level))
        _x = val1
        buff.write(_get_struct_2qdq2B3q2B2q().pack(_x.act_type, _x.chassis_total_hour, _x.distance_to_target, _x.drv_direction, _x.empty, _x.estop, _x.firm_error_status, _x.frame_ts, _x.gear, _x.in_high_voltage, _x.is_charging, _x.mileage, _x.motion_mode))
        _x = val1.navi_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_4qdq().pack(_x.operational_status, _x.platform_state, _x.soc, _x.soh, _x.speed, _x.state_flow))
        _x = val1.sub_target
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.target
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.task_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_4q().pack(_x.task_mode, _x.task_type, _x.turn_light, _x.vehicle_error_status))
        _x = val1.vin
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.timestamp
      buff.write(_get_struct_q().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.all_status is None:
        self.all_status = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.all_status = []
      for i in range(0, length):
        val1 = mqtt_commx.msg.act_status()
        _v7 = val1.header
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v7.trace_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v7.trace_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v7.trans_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v7.trans_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v7.che_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v7.che_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v7.timestamp = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v7.timestamp = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v7.version = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v7.version = str[start:end]
        _v8 = val1.point
        _x = _v8
        start = end
        end += 32
        (_x.x, _x.y, _x.yaw, _x.z,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.faults = []
        for i in range(0, length):
          val2 = mqtt_commx.msg.fault_info()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.desc = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.desc = str[start:end]
          _x = val2
          start = end
          end += 12
          (_x.code, _x.level,) = _get_struct_qi().unpack(str[start:end])
          val1.faults.append(val2)
        _x = val1
        start = end
        end += 76
        (_x.act_type, _x.chassis_total_hour, _x.distance_to_target, _x.drv_direction, _x.empty, _x.estop, _x.firm_error_status, _x.frame_ts, _x.gear, _x.in_high_voltage, _x.is_charging, _x.mileage, _x.motion_mode,) = _get_struct_2qdq2B3q2B2q().unpack(str[start:end])
        val1.empty = bool(val1.empty)
        val1.estop = bool(val1.estop)
        val1.in_high_voltage = bool(val1.in_high_voltage)
        val1.is_charging = bool(val1.is_charging)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.navi_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.navi_id = str[start:end]
        _x = val1
        start = end
        end += 48
        (_x.operational_status, _x.platform_state, _x.soc, _x.soh, _x.speed, _x.state_flow,) = _get_struct_4qdq().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.sub_target = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.sub_target = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.target = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.target = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.task_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.task_id = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.task_mode, _x.task_type, _x.turn_light, _x.vehicle_error_status,) = _get_struct_4q().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.vin = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.vin = str[start:end]
        self.all_status.append(val1)
      start = end
      end += 8
      (self.timestamp,) = _get_struct_q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2qdq2B3q2B2q = None
def _get_struct_2qdq2B3q2B2q():
    global _struct_2qdq2B3q2B2q
    if _struct_2qdq2B3q2B2q is None:
        _struct_2qdq2B3q2B2q = struct.Struct("<2qdq2B3q2B2q")
    return _struct_2qdq2B3q2B2q
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_4q = None
def _get_struct_4q():
    global _struct_4q
    if _struct_4q is None:
        _struct_4q = struct.Struct("<4q")
    return _struct_4q
_struct_4qdq = None
def _get_struct_4qdq():
    global _struct_4qdq
    if _struct_4qdq is None:
        _struct_4qdq = struct.Struct("<4qdq")
    return _struct_4qdq
_struct_q = None
def _get_struct_q():
    global _struct_q
    if _struct_q is None:
        _struct_q = struct.Struct("<q")
    return _struct_q
_struct_qi = None
def _get_struct_qi():
    global _struct_qi
    if _struct_qi is None:
        _struct_qi = struct.Struct("<qi")
    return _struct_qi
