# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mqtt_commx/fault_info_array.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import mqtt_commx.msg

class fault_info_array(genpy.Message):
  _md5sum = "3b519e6234e93bf86de021428c1d9d96"
  _type = "mqtt_commx/fault_info_array"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """fault_info[] fault_info_data
int64 timestamp
================================================================================
MSG: mqtt_commx/fault_info
string desc
int64 code
int32 level
"""
  __slots__ = ['fault_info_data','timestamp']
  _slot_types = ['mqtt_commx/fault_info[]','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       fault_info_data,timestamp

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(fault_info_array, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.fault_info_data is None:
        self.fault_info_data = []
      if self.timestamp is None:
        self.timestamp = 0
    else:
      self.fault_info_data = []
      self.timestamp = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.fault_info_data)
      buff.write(_struct_I.pack(length))
      for val1 in self.fault_info_data:
        _x = val1.desc
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_qi().pack(_x.code, _x.level))
      _x = self.timestamp
      buff.write(_get_struct_q().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.fault_info_data is None:
        self.fault_info_data = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fault_info_data = []
      for i in range(0, length):
        val1 = mqtt_commx.msg.fault_info()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.desc = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.desc = str[start:end]
        _x = val1
        start = end
        end += 12
        (_x.code, _x.level,) = _get_struct_qi().unpack(str[start:end])
        self.fault_info_data.append(val1)
      start = end
      end += 8
      (self.timestamp,) = _get_struct_q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.fault_info_data)
      buff.write(_struct_I.pack(length))
      for val1 in self.fault_info_data:
        _x = val1.desc
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_qi().pack(_x.code, _x.level))
      _x = self.timestamp
      buff.write(_get_struct_q().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.fault_info_data is None:
        self.fault_info_data = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fault_info_data = []
      for i in range(0, length):
        val1 = mqtt_commx.msg.fault_info()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.desc = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.desc = str[start:end]
        _x = val1
        start = end
        end += 12
        (_x.code, _x.level,) = _get_struct_qi().unpack(str[start:end])
        self.fault_info_data.append(val1)
      start = end
      end += 8
      (self.timestamp,) = _get_struct_q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_q = None
def _get_struct_q():
    global _struct_q
    if _struct_q is None:
        _struct_q = struct.Struct("<q")
    return _struct_q
_struct_qi = None
def _get_struct_qi():
    global _struct_qi
    if _struct_qi is None:
        _struct_qi = struct.Struct("<qi")
    return _struct_qi
