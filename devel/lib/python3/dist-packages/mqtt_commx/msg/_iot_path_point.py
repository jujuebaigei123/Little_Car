# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mqtt_commx/iot_path_point.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class iot_path_point(genpy.Message):
  _md5sum = "f109249047779f0f5bde21421b2af811"
  _type = "mqtt_commx/iot_path_point"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 direction
int32 type
int32 driving_direction
string id
float32 speed_vmax
float32 vmax_dev
int32 lane_type

float64 pointX
float64 pointY
float64 pointHA
"""
  __slots__ = ['direction','type','driving_direction','id','speed_vmax','vmax_dev','lane_type','pointX','pointY','pointHA']
  _slot_types = ['int32','int32','int32','string','float32','float32','int32','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       direction,type,driving_direction,id,speed_vmax,vmax_dev,lane_type,pointX,pointY,pointHA

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(iot_path_point, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.direction is None:
        self.direction = 0
      if self.type is None:
        self.type = 0
      if self.driving_direction is None:
        self.driving_direction = 0
      if self.id is None:
        self.id = ''
      if self.speed_vmax is None:
        self.speed_vmax = 0.
      if self.vmax_dev is None:
        self.vmax_dev = 0.
      if self.lane_type is None:
        self.lane_type = 0
      if self.pointX is None:
        self.pointX = 0.
      if self.pointY is None:
        self.pointY = 0.
      if self.pointHA is None:
        self.pointHA = 0.
    else:
      self.direction = 0
      self.type = 0
      self.driving_direction = 0
      self.id = ''
      self.speed_vmax = 0.
      self.vmax_dev = 0.
      self.lane_type = 0
      self.pointX = 0.
      self.pointY = 0.
      self.pointHA = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3i().pack(_x.direction, _x.type, _x.driving_direction))
      _x = self.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2fi3d().pack(_x.speed_vmax, _x.vmax_dev, _x.lane_type, _x.pointX, _x.pointY, _x.pointHA))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.direction, _x.type, _x.driving_direction,) = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.id = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.speed_vmax, _x.vmax_dev, _x.lane_type, _x.pointX, _x.pointY, _x.pointHA,) = _get_struct_2fi3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3i().pack(_x.direction, _x.type, _x.driving_direction))
      _x = self.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2fi3d().pack(_x.speed_vmax, _x.vmax_dev, _x.lane_type, _x.pointX, _x.pointY, _x.pointHA))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.direction, _x.type, _x.driving_direction,) = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.id = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.speed_vmax, _x.vmax_dev, _x.lane_type, _x.pointX, _x.pointY, _x.pointHA,) = _get_struct_2fi3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2fi3d = None
def _get_struct_2fi3d():
    global _struct_2fi3d
    if _struct_2fi3d is None:
        _struct_2fi3d = struct.Struct("<2fi3d")
    return _struct_2fi3d
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
