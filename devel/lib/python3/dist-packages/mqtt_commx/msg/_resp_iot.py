# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mqtt_commx/resp_iot.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import mqtt_commx.msg

class resp_iot(genpy.Message):
  _md5sum = "3464ad6bcd20665bf6b59cba1ab9629c"
  _type = "mqtt_commx/resp_iot"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 state_flow
int32 task_mode
int32 chassis_total_hour
int32 drv_direction

int32 firm_error_state
int32 vehicle_error_status
fault_info_array faults
int32 mileage

bool in_high_voltage
string vin
string task_id
string navi_id
int32 task_type

int32 act_type
string target
string sub_target
================================================================================
MSG: mqtt_commx/fault_info_array
fault_info[] fault_info_data
int64 timestamp
================================================================================
MSG: mqtt_commx/fault_info
string desc
int64 code
int32 level
"""
  __slots__ = ['state_flow','task_mode','chassis_total_hour','drv_direction','firm_error_state','vehicle_error_status','faults','mileage','in_high_voltage','vin','task_id','navi_id','task_type','act_type','target','sub_target']
  _slot_types = ['int32','int32','int32','int32','int32','int32','mqtt_commx/fault_info_array','int32','bool','string','string','string','int32','int32','string','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       state_flow,task_mode,chassis_total_hour,drv_direction,firm_error_state,vehicle_error_status,faults,mileage,in_high_voltage,vin,task_id,navi_id,task_type,act_type,target,sub_target

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(resp_iot, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.state_flow is None:
        self.state_flow = 0
      if self.task_mode is None:
        self.task_mode = 0
      if self.chassis_total_hour is None:
        self.chassis_total_hour = 0
      if self.drv_direction is None:
        self.drv_direction = 0
      if self.firm_error_state is None:
        self.firm_error_state = 0
      if self.vehicle_error_status is None:
        self.vehicle_error_status = 0
      if self.faults is None:
        self.faults = mqtt_commx.msg.fault_info_array()
      if self.mileage is None:
        self.mileage = 0
      if self.in_high_voltage is None:
        self.in_high_voltage = False
      if self.vin is None:
        self.vin = ''
      if self.task_id is None:
        self.task_id = ''
      if self.navi_id is None:
        self.navi_id = ''
      if self.task_type is None:
        self.task_type = 0
      if self.act_type is None:
        self.act_type = 0
      if self.target is None:
        self.target = ''
      if self.sub_target is None:
        self.sub_target = ''
    else:
      self.state_flow = 0
      self.task_mode = 0
      self.chassis_total_hour = 0
      self.drv_direction = 0
      self.firm_error_state = 0
      self.vehicle_error_status = 0
      self.faults = mqtt_commx.msg.fault_info_array()
      self.mileage = 0
      self.in_high_voltage = False
      self.vin = ''
      self.task_id = ''
      self.navi_id = ''
      self.task_type = 0
      self.act_type = 0
      self.target = ''
      self.sub_target = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6i().pack(_x.state_flow, _x.task_mode, _x.chassis_total_hour, _x.drv_direction, _x.firm_error_state, _x.vehicle_error_status))
      length = len(self.faults.fault_info_data)
      buff.write(_struct_I.pack(length))
      for val1 in self.faults.fault_info_data:
        _x = val1.desc
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_qi().pack(_x.code, _x.level))
      _x = self
      buff.write(_get_struct_qiB().pack(_x.faults.timestamp, _x.mileage, _x.in_high_voltage))
      _x = self.vin
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.task_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.navi_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2i().pack(_x.task_type, _x.act_type))
      _x = self.target
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.sub_target
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.faults is None:
        self.faults = mqtt_commx.msg.fault_info_array()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.state_flow, _x.task_mode, _x.chassis_total_hour, _x.drv_direction, _x.firm_error_state, _x.vehicle_error_status,) = _get_struct_6i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.faults.fault_info_data = []
      for i in range(0, length):
        val1 = mqtt_commx.msg.fault_info()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.desc = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.desc = str[start:end]
        _x = val1
        start = end
        end += 12
        (_x.code, _x.level,) = _get_struct_qi().unpack(str[start:end])
        self.faults.fault_info_data.append(val1)
      _x = self
      start = end
      end += 13
      (_x.faults.timestamp, _x.mileage, _x.in_high_voltage,) = _get_struct_qiB().unpack(str[start:end])
      self.in_high_voltage = bool(self.in_high_voltage)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vin = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vin = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.task_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.navi_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.navi_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.task_type, _x.act_type,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.target = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.target = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.sub_target = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.sub_target = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6i().pack(_x.state_flow, _x.task_mode, _x.chassis_total_hour, _x.drv_direction, _x.firm_error_state, _x.vehicle_error_status))
      length = len(self.faults.fault_info_data)
      buff.write(_struct_I.pack(length))
      for val1 in self.faults.fault_info_data:
        _x = val1.desc
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_qi().pack(_x.code, _x.level))
      _x = self
      buff.write(_get_struct_qiB().pack(_x.faults.timestamp, _x.mileage, _x.in_high_voltage))
      _x = self.vin
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.task_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.navi_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2i().pack(_x.task_type, _x.act_type))
      _x = self.target
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.sub_target
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.faults is None:
        self.faults = mqtt_commx.msg.fault_info_array()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.state_flow, _x.task_mode, _x.chassis_total_hour, _x.drv_direction, _x.firm_error_state, _x.vehicle_error_status,) = _get_struct_6i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.faults.fault_info_data = []
      for i in range(0, length):
        val1 = mqtt_commx.msg.fault_info()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.desc = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.desc = str[start:end]
        _x = val1
        start = end
        end += 12
        (_x.code, _x.level,) = _get_struct_qi().unpack(str[start:end])
        self.faults.fault_info_data.append(val1)
      _x = self
      start = end
      end += 13
      (_x.faults.timestamp, _x.mileage, _x.in_high_voltage,) = _get_struct_qiB().unpack(str[start:end])
      self.in_high_voltage = bool(self.in_high_voltage)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vin = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vin = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.task_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.navi_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.navi_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.task_type, _x.act_type,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.target = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.target = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.sub_target = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.sub_target = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_6i = None
def _get_struct_6i():
    global _struct_6i
    if _struct_6i is None:
        _struct_6i = struct.Struct("<6i")
    return _struct_6i
_struct_qi = None
def _get_struct_qi():
    global _struct_qi
    if _struct_qi is None:
        _struct_qi = struct.Struct("<qi")
    return _struct_qi
_struct_qiB = None
def _get_struct_qiB():
    global _struct_qiB
    if _struct_qiB is None:
        _struct_qiB = struct.Struct("<qiB")
    return _struct_qiB
