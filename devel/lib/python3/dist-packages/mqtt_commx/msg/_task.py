# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mqtt_commx/task.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import mqtt_commx.msg

class task(genpy.Message):
  _md5sum = "bde58ca2fd96754ea94604b71e597ab7"
  _type = "mqtt_commx/task"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """time stamp         #时间戳
string cmd         #任务
string subcmd      #交通信号灯、控制状态
path_point[] path  #路径
bool final_path
string task_id



================================================================================
MSG: mqtt_commx/path_point
float32 vehSpeed
float64 pointX
float64 pointY
float64 pointHA
"""
  __slots__ = ['stamp','cmd','subcmd','path','final_path','task_id']
  _slot_types = ['time','string','string','mqtt_commx/path_point[]','bool','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stamp,cmd,subcmd,path,final_path,task_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(task, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.cmd is None:
        self.cmd = ''
      if self.subcmd is None:
        self.subcmd = ''
      if self.path is None:
        self.path = []
      if self.final_path is None:
        self.final_path = False
      if self.task_id is None:
        self.task_id = ''
    else:
      self.stamp = genpy.Time()
      self.cmd = ''
      self.subcmd = ''
      self.path = []
      self.final_path = False
      self.task_id = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.stamp.secs, _x.stamp.nsecs))
      _x = self.cmd
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.subcmd
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.path)
      buff.write(_struct_I.pack(length))
      for val1 in self.path:
        _x = val1
        buff.write(_get_struct_f3d().pack(_x.vehSpeed, _x.pointX, _x.pointY, _x.pointHA))
      _x = self.final_path
      buff.write(_get_struct_B().pack(_x))
      _x = self.task_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.path is None:
        self.path = None
      end = 0
      _x = self
      start = end
      end += 8
      (_x.stamp.secs, _x.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cmd = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.cmd = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.subcmd = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.subcmd = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path = []
      for i in range(0, length):
        val1 = mqtt_commx.msg.path_point()
        _x = val1
        start = end
        end += 28
        (_x.vehSpeed, _x.pointX, _x.pointY, _x.pointHA,) = _get_struct_f3d().unpack(str[start:end])
        self.path.append(val1)
      start = end
      end += 1
      (self.final_path,) = _get_struct_B().unpack(str[start:end])
      self.final_path = bool(self.final_path)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.task_id = str[start:end]
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.stamp.secs, _x.stamp.nsecs))
      _x = self.cmd
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.subcmd
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.path)
      buff.write(_struct_I.pack(length))
      for val1 in self.path:
        _x = val1
        buff.write(_get_struct_f3d().pack(_x.vehSpeed, _x.pointX, _x.pointY, _x.pointHA))
      _x = self.final_path
      buff.write(_get_struct_B().pack(_x))
      _x = self.task_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.path is None:
        self.path = None
      end = 0
      _x = self
      start = end
      end += 8
      (_x.stamp.secs, _x.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cmd = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.cmd = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.subcmd = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.subcmd = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path = []
      for i in range(0, length):
        val1 = mqtt_commx.msg.path_point()
        _x = val1
        start = end
        end += 28
        (_x.vehSpeed, _x.pointX, _x.pointY, _x.pointHA,) = _get_struct_f3d().unpack(str[start:end])
        self.path.append(val1)
      start = end
      end += 1
      (self.final_path,) = _get_struct_B().unpack(str[start:end])
      self.final_path = bool(self.final_path)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.task_id = str[start:end]
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_f3d = None
def _get_struct_f3d():
    global _struct_f3d
    if _struct_f3d is None:
        _struct_f3d = struct.Struct("<f3d")
    return _struct_f3d
