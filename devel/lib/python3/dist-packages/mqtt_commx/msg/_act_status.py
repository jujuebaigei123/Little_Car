# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mqtt_commx/act_status.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import mqtt_commx.msg

class act_status(genpy.Message):
  _md5sum = "3a229cb3686a6eb829168e6cd0fe7cda"
  _type = "mqtt_commx/act_status"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """cmd_Header header
Point point
fault_info[]  faults

int64 act_type
int64 chassis_total_hour
float64 distance_to_target
int64 drv_direction
bool empty
bool estop
int64 firm_error_status
int64 frame_ts
int64 gear
bool in_high_voltage    # 取车状态
bool is_charging
int64 mileage
int64 motion_mode
string navi_id
int64 operational_status
int64 platform_state
int64 soc
int64 soh
float64 speed
int64 state_flow
string sub_target
string target
string task_id
int64 task_mode
int64 task_type
int64 turn_light
int64 vehicle_error_status
string vin

================================================================================
MSG: mqtt_commx/cmd_Header
string trace_id
string trans_id
string che_id
string timestamp
string version
================================================================================
MSG: mqtt_commx/Point
float64 x
float64 y
float64 yaw
float64 z

================================================================================
MSG: mqtt_commx/fault_info
string desc
int64 code
int32 level
"""
  __slots__ = ['header','point','faults','act_type','chassis_total_hour','distance_to_target','drv_direction','empty','estop','firm_error_status','frame_ts','gear','in_high_voltage','is_charging','mileage','motion_mode','navi_id','operational_status','platform_state','soc','soh','speed','state_flow','sub_target','target','task_id','task_mode','task_type','turn_light','vehicle_error_status','vin']
  _slot_types = ['mqtt_commx/cmd_Header','mqtt_commx/Point','mqtt_commx/fault_info[]','int64','int64','float64','int64','bool','bool','int64','int64','int64','bool','bool','int64','int64','string','int64','int64','int64','int64','float64','int64','string','string','string','int64','int64','int64','int64','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,point,faults,act_type,chassis_total_hour,distance_to_target,drv_direction,empty,estop,firm_error_status,frame_ts,gear,in_high_voltage,is_charging,mileage,motion_mode,navi_id,operational_status,platform_state,soc,soh,speed,state_flow,sub_target,target,task_id,task_mode,task_type,turn_light,vehicle_error_status,vin

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(act_status, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = mqtt_commx.msg.cmd_Header()
      if self.point is None:
        self.point = mqtt_commx.msg.Point()
      if self.faults is None:
        self.faults = []
      if self.act_type is None:
        self.act_type = 0
      if self.chassis_total_hour is None:
        self.chassis_total_hour = 0
      if self.distance_to_target is None:
        self.distance_to_target = 0.
      if self.drv_direction is None:
        self.drv_direction = 0
      if self.empty is None:
        self.empty = False
      if self.estop is None:
        self.estop = False
      if self.firm_error_status is None:
        self.firm_error_status = 0
      if self.frame_ts is None:
        self.frame_ts = 0
      if self.gear is None:
        self.gear = 0
      if self.in_high_voltage is None:
        self.in_high_voltage = False
      if self.is_charging is None:
        self.is_charging = False
      if self.mileage is None:
        self.mileage = 0
      if self.motion_mode is None:
        self.motion_mode = 0
      if self.navi_id is None:
        self.navi_id = ''
      if self.operational_status is None:
        self.operational_status = 0
      if self.platform_state is None:
        self.platform_state = 0
      if self.soc is None:
        self.soc = 0
      if self.soh is None:
        self.soh = 0
      if self.speed is None:
        self.speed = 0.
      if self.state_flow is None:
        self.state_flow = 0
      if self.sub_target is None:
        self.sub_target = ''
      if self.target is None:
        self.target = ''
      if self.task_id is None:
        self.task_id = ''
      if self.task_mode is None:
        self.task_mode = 0
      if self.task_type is None:
        self.task_type = 0
      if self.turn_light is None:
        self.turn_light = 0
      if self.vehicle_error_status is None:
        self.vehicle_error_status = 0
      if self.vin is None:
        self.vin = ''
    else:
      self.header = mqtt_commx.msg.cmd_Header()
      self.point = mqtt_commx.msg.Point()
      self.faults = []
      self.act_type = 0
      self.chassis_total_hour = 0
      self.distance_to_target = 0.
      self.drv_direction = 0
      self.empty = False
      self.estop = False
      self.firm_error_status = 0
      self.frame_ts = 0
      self.gear = 0
      self.in_high_voltage = False
      self.is_charging = False
      self.mileage = 0
      self.motion_mode = 0
      self.navi_id = ''
      self.operational_status = 0
      self.platform_state = 0
      self.soc = 0
      self.soh = 0
      self.speed = 0.
      self.state_flow = 0
      self.sub_target = ''
      self.target = ''
      self.task_id = ''
      self.task_mode = 0
      self.task_type = 0
      self.turn_light = 0
      self.vehicle_error_status = 0
      self.vin = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.header.trace_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.header.trans_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.header.che_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.header.timestamp
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.header.version
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.point.x, _x.point.y, _x.point.yaw, _x.point.z))
      length = len(self.faults)
      buff.write(_struct_I.pack(length))
      for val1 in self.faults:
        _x = val1.desc
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_qi().pack(_x.code, _x.level))
      _x = self
      buff.write(_get_struct_2qdq2B3q2B2q().pack(_x.act_type, _x.chassis_total_hour, _x.distance_to_target, _x.drv_direction, _x.empty, _x.estop, _x.firm_error_status, _x.frame_ts, _x.gear, _x.in_high_voltage, _x.is_charging, _x.mileage, _x.motion_mode))
      _x = self.navi_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4qdq().pack(_x.operational_status, _x.platform_state, _x.soc, _x.soh, _x.speed, _x.state_flow))
      _x = self.sub_target
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.target
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.task_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4q().pack(_x.task_mode, _x.task_type, _x.turn_light, _x.vehicle_error_status))
      _x = self.vin
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = mqtt_commx.msg.cmd_Header()
      if self.point is None:
        self.point = mqtt_commx.msg.Point()
      if self.faults is None:
        self.faults = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.trace_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.trace_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.trans_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.trans_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.che_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.che_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.timestamp = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.timestamp = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.version = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.version = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.point.x, _x.point.y, _x.point.yaw, _x.point.z,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.faults = []
      for i in range(0, length):
        val1 = mqtt_commx.msg.fault_info()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.desc = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.desc = str[start:end]
        _x = val1
        start = end
        end += 12
        (_x.code, _x.level,) = _get_struct_qi().unpack(str[start:end])
        self.faults.append(val1)
      _x = self
      start = end
      end += 76
      (_x.act_type, _x.chassis_total_hour, _x.distance_to_target, _x.drv_direction, _x.empty, _x.estop, _x.firm_error_status, _x.frame_ts, _x.gear, _x.in_high_voltage, _x.is_charging, _x.mileage, _x.motion_mode,) = _get_struct_2qdq2B3q2B2q().unpack(str[start:end])
      self.empty = bool(self.empty)
      self.estop = bool(self.estop)
      self.in_high_voltage = bool(self.in_high_voltage)
      self.is_charging = bool(self.is_charging)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.navi_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.navi_id = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.operational_status, _x.platform_state, _x.soc, _x.soh, _x.speed, _x.state_flow,) = _get_struct_4qdq().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.sub_target = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.sub_target = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.target = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.target = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.task_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.task_mode, _x.task_type, _x.turn_light, _x.vehicle_error_status,) = _get_struct_4q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vin = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vin = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.header.trace_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.header.trans_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.header.che_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.header.timestamp
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.header.version
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.point.x, _x.point.y, _x.point.yaw, _x.point.z))
      length = len(self.faults)
      buff.write(_struct_I.pack(length))
      for val1 in self.faults:
        _x = val1.desc
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_qi().pack(_x.code, _x.level))
      _x = self
      buff.write(_get_struct_2qdq2B3q2B2q().pack(_x.act_type, _x.chassis_total_hour, _x.distance_to_target, _x.drv_direction, _x.empty, _x.estop, _x.firm_error_status, _x.frame_ts, _x.gear, _x.in_high_voltage, _x.is_charging, _x.mileage, _x.motion_mode))
      _x = self.navi_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4qdq().pack(_x.operational_status, _x.platform_state, _x.soc, _x.soh, _x.speed, _x.state_flow))
      _x = self.sub_target
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.target
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.task_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4q().pack(_x.task_mode, _x.task_type, _x.turn_light, _x.vehicle_error_status))
      _x = self.vin
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = mqtt_commx.msg.cmd_Header()
      if self.point is None:
        self.point = mqtt_commx.msg.Point()
      if self.faults is None:
        self.faults = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.trace_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.trace_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.trans_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.trans_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.che_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.che_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.timestamp = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.timestamp = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.version = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.version = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.point.x, _x.point.y, _x.point.yaw, _x.point.z,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.faults = []
      for i in range(0, length):
        val1 = mqtt_commx.msg.fault_info()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.desc = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.desc = str[start:end]
        _x = val1
        start = end
        end += 12
        (_x.code, _x.level,) = _get_struct_qi().unpack(str[start:end])
        self.faults.append(val1)
      _x = self
      start = end
      end += 76
      (_x.act_type, _x.chassis_total_hour, _x.distance_to_target, _x.drv_direction, _x.empty, _x.estop, _x.firm_error_status, _x.frame_ts, _x.gear, _x.in_high_voltage, _x.is_charging, _x.mileage, _x.motion_mode,) = _get_struct_2qdq2B3q2B2q().unpack(str[start:end])
      self.empty = bool(self.empty)
      self.estop = bool(self.estop)
      self.in_high_voltage = bool(self.in_high_voltage)
      self.is_charging = bool(self.is_charging)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.navi_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.navi_id = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.operational_status, _x.platform_state, _x.soc, _x.soh, _x.speed, _x.state_flow,) = _get_struct_4qdq().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.sub_target = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.sub_target = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.target = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.target = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.task_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.task_mode, _x.task_type, _x.turn_light, _x.vehicle_error_status,) = _get_struct_4q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vin = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vin = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2qdq2B3q2B2q = None
def _get_struct_2qdq2B3q2B2q():
    global _struct_2qdq2B3q2B2q
    if _struct_2qdq2B3q2B2q is None:
        _struct_2qdq2B3q2B2q = struct.Struct("<2qdq2B3q2B2q")
    return _struct_2qdq2B3q2B2q
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_4q = None
def _get_struct_4q():
    global _struct_4q
    if _struct_4q is None:
        _struct_4q = struct.Struct("<4q")
    return _struct_4q
_struct_4qdq = None
def _get_struct_4qdq():
    global _struct_4qdq
    if _struct_4qdq is None:
        _struct_4qdq = struct.Struct("<4qdq")
    return _struct_4qdq
_struct_qi = None
def _get_struct_qi():
    global _struct_qi
    if _struct_qi is None:
        _struct_qi = struct.Struct("<qi")
    return _struct_qi
