# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mqtt_commx/iot_taskpath.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import mqtt_commx.msg

class iot_taskpath(genpy.Message):
  _md5sum = "b090287600ee4263cb79e16674b501c4"
  _type = "mqtt_commx/iot_taskpath"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """cmd_Header header

#task
string taskId             #作业任务的id
string navi_id            #导航任务编号
int32 seq_num             #顺序号
int32 route_direction     #路径方向
int32 dest_type           #目的地类型
iot_path_point[] path         #路径
bool route_update       
bool is_final_navi









================================================================================
MSG: mqtt_commx/cmd_Header
string trace_id
string trans_id
string che_id
string timestamp
string version
================================================================================
MSG: mqtt_commx/iot_path_point
int32 direction
int32 type
int32 driving_direction
string id
float32 speed_vmax
float32 vmax_dev
int32 lane_type

float64 pointX
float64 pointY
float64 pointHA
"""
  __slots__ = ['header','taskId','navi_id','seq_num','route_direction','dest_type','path','route_update','is_final_navi']
  _slot_types = ['mqtt_commx/cmd_Header','string','string','int32','int32','int32','mqtt_commx/iot_path_point[]','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,taskId,navi_id,seq_num,route_direction,dest_type,path,route_update,is_final_navi

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(iot_taskpath, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = mqtt_commx.msg.cmd_Header()
      if self.taskId is None:
        self.taskId = ''
      if self.navi_id is None:
        self.navi_id = ''
      if self.seq_num is None:
        self.seq_num = 0
      if self.route_direction is None:
        self.route_direction = 0
      if self.dest_type is None:
        self.dest_type = 0
      if self.path is None:
        self.path = []
      if self.route_update is None:
        self.route_update = False
      if self.is_final_navi is None:
        self.is_final_navi = False
    else:
      self.header = mqtt_commx.msg.cmd_Header()
      self.taskId = ''
      self.navi_id = ''
      self.seq_num = 0
      self.route_direction = 0
      self.dest_type = 0
      self.path = []
      self.route_update = False
      self.is_final_navi = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.header.trace_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.header.trans_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.header.che_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.header.timestamp
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.header.version
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.taskId
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.navi_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3i().pack(_x.seq_num, _x.route_direction, _x.dest_type))
      length = len(self.path)
      buff.write(_struct_I.pack(length))
      for val1 in self.path:
        _x = val1
        buff.write(_get_struct_3i().pack(_x.direction, _x.type, _x.driving_direction))
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2fi3d().pack(_x.speed_vmax, _x.vmax_dev, _x.lane_type, _x.pointX, _x.pointY, _x.pointHA))
      _x = self
      buff.write(_get_struct_2B().pack(_x.route_update, _x.is_final_navi))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = mqtt_commx.msg.cmd_Header()
      if self.path is None:
        self.path = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.trace_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.trace_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.trans_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.trans_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.che_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.che_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.timestamp = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.timestamp = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.version = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.version = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.taskId = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.taskId = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.navi_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.navi_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.seq_num, _x.route_direction, _x.dest_type,) = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path = []
      for i in range(0, length):
        val1 = mqtt_commx.msg.iot_path_point()
        _x = val1
        start = end
        end += 12
        (_x.direction, _x.type, _x.driving_direction,) = _get_struct_3i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.id = str[start:end]
        _x = val1
        start = end
        end += 36
        (_x.speed_vmax, _x.vmax_dev, _x.lane_type, _x.pointX, _x.pointY, _x.pointHA,) = _get_struct_2fi3d().unpack(str[start:end])
        self.path.append(val1)
      _x = self
      start = end
      end += 2
      (_x.route_update, _x.is_final_navi,) = _get_struct_2B().unpack(str[start:end])
      self.route_update = bool(self.route_update)
      self.is_final_navi = bool(self.is_final_navi)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.header.trace_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.header.trans_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.header.che_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.header.timestamp
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.header.version
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.taskId
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.navi_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3i().pack(_x.seq_num, _x.route_direction, _x.dest_type))
      length = len(self.path)
      buff.write(_struct_I.pack(length))
      for val1 in self.path:
        _x = val1
        buff.write(_get_struct_3i().pack(_x.direction, _x.type, _x.driving_direction))
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2fi3d().pack(_x.speed_vmax, _x.vmax_dev, _x.lane_type, _x.pointX, _x.pointY, _x.pointHA))
      _x = self
      buff.write(_get_struct_2B().pack(_x.route_update, _x.is_final_navi))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = mqtt_commx.msg.cmd_Header()
      if self.path is None:
        self.path = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.trace_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.trace_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.trans_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.trans_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.che_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.che_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.timestamp = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.timestamp = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.version = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.version = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.taskId = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.taskId = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.navi_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.navi_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.seq_num, _x.route_direction, _x.dest_type,) = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path = []
      for i in range(0, length):
        val1 = mqtt_commx.msg.iot_path_point()
        _x = val1
        start = end
        end += 12
        (_x.direction, _x.type, _x.driving_direction,) = _get_struct_3i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.id = str[start:end]
        _x = val1
        start = end
        end += 36
        (_x.speed_vmax, _x.vmax_dev, _x.lane_type, _x.pointX, _x.pointY, _x.pointHA,) = _get_struct_2fi3d().unpack(str[start:end])
        self.path.append(val1)
      _x = self
      start = end
      end += 2
      (_x.route_update, _x.is_final_navi,) = _get_struct_2B().unpack(str[start:end])
      self.route_update = bool(self.route_update)
      self.is_final_navi = bool(self.is_final_navi)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_2fi3d = None
def _get_struct_2fi3d():
    global _struct_2fi3d
    if _struct_2fi3d is None:
        _struct_2fi3d = struct.Struct("<2fi3d")
    return _struct_2fi3d
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
