# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gps/MyGPS_msg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class MyGPS_msg(genpy.Message):
  _md5sum = "026ac90c0e99c71302e8b4f4029817a8"
  _type = "gps/MyGPS_msg"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header 
float64 Lat
float64 Lon
float64 UTM_X
float64 UTM_Y
float64 Angle
float64 map_x
float64 map_y

float64 raw_UTM_X
float64 raw_UTM_Y
float64 raw_Angle
float64 raw_map_x
float64 raw_map_y

float64 mqtt_angle

float64 Vel
int8 Quality
int8 HeartBeat



================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','Lat','Lon','UTM_X','UTM_Y','Angle','map_x','map_y','raw_UTM_X','raw_UTM_Y','raw_Angle','raw_map_x','raw_map_y','mqtt_angle','Vel','Quality','HeartBeat']
  _slot_types = ['std_msgs/Header','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,Lat,Lon,UTM_X,UTM_Y,Angle,map_x,map_y,raw_UTM_X,raw_UTM_Y,raw_Angle,raw_map_x,raw_map_y,mqtt_angle,Vel,Quality,HeartBeat

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MyGPS_msg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.Lat is None:
        self.Lat = 0.
      if self.Lon is None:
        self.Lon = 0.
      if self.UTM_X is None:
        self.UTM_X = 0.
      if self.UTM_Y is None:
        self.UTM_Y = 0.
      if self.Angle is None:
        self.Angle = 0.
      if self.map_x is None:
        self.map_x = 0.
      if self.map_y is None:
        self.map_y = 0.
      if self.raw_UTM_X is None:
        self.raw_UTM_X = 0.
      if self.raw_UTM_Y is None:
        self.raw_UTM_Y = 0.
      if self.raw_Angle is None:
        self.raw_Angle = 0.
      if self.raw_map_x is None:
        self.raw_map_x = 0.
      if self.raw_map_y is None:
        self.raw_map_y = 0.
      if self.mqtt_angle is None:
        self.mqtt_angle = 0.
      if self.Vel is None:
        self.Vel = 0.
      if self.Quality is None:
        self.Quality = 0
      if self.HeartBeat is None:
        self.HeartBeat = 0
    else:
      self.header = std_msgs.msg.Header()
      self.Lat = 0.
      self.Lon = 0.
      self.UTM_X = 0.
      self.UTM_Y = 0.
      self.Angle = 0.
      self.map_x = 0.
      self.map_y = 0.
      self.raw_UTM_X = 0.
      self.raw_UTM_Y = 0.
      self.raw_Angle = 0.
      self.raw_map_x = 0.
      self.raw_map_y = 0.
      self.mqtt_angle = 0.
      self.Vel = 0.
      self.Quality = 0
      self.HeartBeat = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_14d2b().pack(_x.Lat, _x.Lon, _x.UTM_X, _x.UTM_Y, _x.Angle, _x.map_x, _x.map_y, _x.raw_UTM_X, _x.raw_UTM_Y, _x.raw_Angle, _x.raw_map_x, _x.raw_map_y, _x.mqtt_angle, _x.Vel, _x.Quality, _x.HeartBeat))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 114
      (_x.Lat, _x.Lon, _x.UTM_X, _x.UTM_Y, _x.Angle, _x.map_x, _x.map_y, _x.raw_UTM_X, _x.raw_UTM_Y, _x.raw_Angle, _x.raw_map_x, _x.raw_map_y, _x.mqtt_angle, _x.Vel, _x.Quality, _x.HeartBeat,) = _get_struct_14d2b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_14d2b().pack(_x.Lat, _x.Lon, _x.UTM_X, _x.UTM_Y, _x.Angle, _x.map_x, _x.map_y, _x.raw_UTM_X, _x.raw_UTM_Y, _x.raw_Angle, _x.raw_map_x, _x.raw_map_y, _x.mqtt_angle, _x.Vel, _x.Quality, _x.HeartBeat))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 114
      (_x.Lat, _x.Lon, _x.UTM_X, _x.UTM_Y, _x.Angle, _x.map_x, _x.map_y, _x.raw_UTM_X, _x.raw_UTM_Y, _x.raw_Angle, _x.raw_map_x, _x.raw_map_y, _x.mqtt_angle, _x.Vel, _x.Quality, _x.HeartBeat,) = _get_struct_14d2b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_14d2b = None
def _get_struct_14d2b():
    global _struct_14d2b
    if _struct_14d2b is None:
        _struct_14d2b = struct.Struct("<14d2b")
    return _struct_14d2b
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
