# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from car_ctr/car_state.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class car_state(genpy.Message):
  _md5sum = "cb22e40eb79ad4fa4ade5e4b0b7218d3"
  _type = "car_ctr/car_state"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool enable
int32 ctrmode
int32 turnmode    # 0-阿克曼  1-差速模式  2-自转模式  3-横移模式  4-斜行    
float32[4] speed
int32[8] errcode"""
  __slots__ = ['enable','ctrmode','turnmode','speed','errcode']
  _slot_types = ['bool','int32','int32','float32[4]','int32[8]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       enable,ctrmode,turnmode,speed,errcode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(car_state, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.enable is None:
        self.enable = False
      if self.ctrmode is None:
        self.ctrmode = 0
      if self.turnmode is None:
        self.turnmode = 0
      if self.speed is None:
        self.speed = [0.] * 4
      if self.errcode is None:
        self.errcode = [0] * 8
    else:
      self.enable = False
      self.ctrmode = 0
      self.turnmode = 0
      self.speed = [0.] * 4
      self.errcode = [0] * 8

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B2i().pack(_x.enable, _x.ctrmode, _x.turnmode))
      buff.write(_get_struct_4f().pack(*self.speed))
      buff.write(_get_struct_8i().pack(*self.errcode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.enable, _x.ctrmode, _x.turnmode,) = _get_struct_B2i().unpack(str[start:end])
      self.enable = bool(self.enable)
      start = end
      end += 16
      self.speed = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 32
      self.errcode = _get_struct_8i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B2i().pack(_x.enable, _x.ctrmode, _x.turnmode))
      buff.write(self.speed.tostring())
      buff.write(self.errcode.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.enable, _x.ctrmode, _x.turnmode,) = _get_struct_B2i().unpack(str[start:end])
      self.enable = bool(self.enable)
      start = end
      end += 16
      self.speed = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 32
      self.errcode = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=8)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_8i = None
def _get_struct_8i():
    global _struct_8i
    if _struct_8i is None:
        _struct_8i = struct.Struct("<8i")
    return _struct_8i
_struct_B2i = None
def _get_struct_B2i():
    global _struct_B2i
    if _struct_B2i is None:
        _struct_B2i = struct.Struct("<B2i")
    return _struct_B2i
