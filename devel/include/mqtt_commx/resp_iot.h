// Generated by gencpp from file mqtt_commx/resp_iot.msg
// DO NOT EDIT!


#ifndef MQTT_COMMX_MESSAGE_RESP_IOT_H
#define MQTT_COMMX_MESSAGE_RESP_IOT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mqtt_commx/fault_info_array.h>

namespace mqtt_commx
{
template <class ContainerAllocator>
struct resp_iot_
{
  typedef resp_iot_<ContainerAllocator> Type;

  resp_iot_()
    : state_flow(0)
    , task_mode(0)
    , chassis_total_hour(0)
    , drv_direction(0)
    , firm_error_state(0)
    , vehicle_error_status(0)
    , faults()
    , mileage(0)
    , in_high_voltage(false)
    , vin()
    , task_id()
    , navi_id()
    , task_type(0)
    , act_type(0)
    , target()
    , sub_target()  {
    }
  resp_iot_(const ContainerAllocator& _alloc)
    : state_flow(0)
    , task_mode(0)
    , chassis_total_hour(0)
    , drv_direction(0)
    , firm_error_state(0)
    , vehicle_error_status(0)
    , faults(_alloc)
    , mileage(0)
    , in_high_voltage(false)
    , vin(_alloc)
    , task_id(_alloc)
    , navi_id(_alloc)
    , task_type(0)
    , act_type(0)
    , target(_alloc)
    , sub_target(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _state_flow_type;
  _state_flow_type state_flow;

   typedef int32_t _task_mode_type;
  _task_mode_type task_mode;

   typedef int32_t _chassis_total_hour_type;
  _chassis_total_hour_type chassis_total_hour;

   typedef int32_t _drv_direction_type;
  _drv_direction_type drv_direction;

   typedef int32_t _firm_error_state_type;
  _firm_error_state_type firm_error_state;

   typedef int32_t _vehicle_error_status_type;
  _vehicle_error_status_type vehicle_error_status;

   typedef  ::mqtt_commx::fault_info_array_<ContainerAllocator>  _faults_type;
  _faults_type faults;

   typedef int32_t _mileage_type;
  _mileage_type mileage;

   typedef uint8_t _in_high_voltage_type;
  _in_high_voltage_type in_high_voltage;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _vin_type;
  _vin_type vin;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _task_id_type;
  _task_id_type task_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _navi_id_type;
  _navi_id_type navi_id;

   typedef int32_t _task_type_type;
  _task_type_type task_type;

   typedef int32_t _act_type_type;
  _act_type_type act_type;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _target_type;
  _target_type target;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _sub_target_type;
  _sub_target_type sub_target;





  typedef boost::shared_ptr< ::mqtt_commx::resp_iot_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mqtt_commx::resp_iot_<ContainerAllocator> const> ConstPtr;

}; // struct resp_iot_

typedef ::mqtt_commx::resp_iot_<std::allocator<void> > resp_iot;

typedef boost::shared_ptr< ::mqtt_commx::resp_iot > resp_iotPtr;
typedef boost::shared_ptr< ::mqtt_commx::resp_iot const> resp_iotConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mqtt_commx::resp_iot_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mqtt_commx::resp_iot_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mqtt_commx::resp_iot_<ContainerAllocator1> & lhs, const ::mqtt_commx::resp_iot_<ContainerAllocator2> & rhs)
{
  return lhs.state_flow == rhs.state_flow &&
    lhs.task_mode == rhs.task_mode &&
    lhs.chassis_total_hour == rhs.chassis_total_hour &&
    lhs.drv_direction == rhs.drv_direction &&
    lhs.firm_error_state == rhs.firm_error_state &&
    lhs.vehicle_error_status == rhs.vehicle_error_status &&
    lhs.faults == rhs.faults &&
    lhs.mileage == rhs.mileage &&
    lhs.in_high_voltage == rhs.in_high_voltage &&
    lhs.vin == rhs.vin &&
    lhs.task_id == rhs.task_id &&
    lhs.navi_id == rhs.navi_id &&
    lhs.task_type == rhs.task_type &&
    lhs.act_type == rhs.act_type &&
    lhs.target == rhs.target &&
    lhs.sub_target == rhs.sub_target;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mqtt_commx::resp_iot_<ContainerAllocator1> & lhs, const ::mqtt_commx::resp_iot_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mqtt_commx

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mqtt_commx::resp_iot_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mqtt_commx::resp_iot_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mqtt_commx::resp_iot_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mqtt_commx::resp_iot_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mqtt_commx::resp_iot_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mqtt_commx::resp_iot_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mqtt_commx::resp_iot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3464ad6bcd20665bf6b59cba1ab9629c";
  }

  static const char* value(const ::mqtt_commx::resp_iot_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3464ad6bcd20665bULL;
  static const uint64_t static_value2 = 0xf6b59cba1ab9629cULL;
};

template<class ContainerAllocator>
struct DataType< ::mqtt_commx::resp_iot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mqtt_commx/resp_iot";
  }

  static const char* value(const ::mqtt_commx::resp_iot_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mqtt_commx::resp_iot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 state_flow\n"
"int32 task_mode\n"
"int32 chassis_total_hour\n"
"int32 drv_direction\n"
"\n"
"int32 firm_error_state\n"
"int32 vehicle_error_status\n"
"fault_info_array faults\n"
"int32 mileage\n"
"\n"
"bool in_high_voltage\n"
"string vin\n"
"string task_id\n"
"string navi_id\n"
"int32 task_type\n"
"\n"
"int32 act_type\n"
"string target\n"
"string sub_target\n"
"================================================================================\n"
"MSG: mqtt_commx/fault_info_array\n"
"fault_info[] fault_info_data\n"
"int64 timestamp\n"
"================================================================================\n"
"MSG: mqtt_commx/fault_info\n"
"string desc\n"
"int64 code\n"
"int32 level\n"
;
  }

  static const char* value(const ::mqtt_commx::resp_iot_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mqtt_commx::resp_iot_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state_flow);
      stream.next(m.task_mode);
      stream.next(m.chassis_total_hour);
      stream.next(m.drv_direction);
      stream.next(m.firm_error_state);
      stream.next(m.vehicle_error_status);
      stream.next(m.faults);
      stream.next(m.mileage);
      stream.next(m.in_high_voltage);
      stream.next(m.vin);
      stream.next(m.task_id);
      stream.next(m.navi_id);
      stream.next(m.task_type);
      stream.next(m.act_type);
      stream.next(m.target);
      stream.next(m.sub_target);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct resp_iot_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mqtt_commx::resp_iot_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mqtt_commx::resp_iot_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "state_flow: ";
    Printer<int32_t>::stream(s, indent + "  ", v.state_flow);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "task_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.task_mode);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "chassis_total_hour: ";
    Printer<int32_t>::stream(s, indent + "  ", v.chassis_total_hour);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "drv_direction: ";
    Printer<int32_t>::stream(s, indent + "  ", v.drv_direction);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "firm_error_state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.firm_error_state);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "vehicle_error_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.vehicle_error_status);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "faults: ";
    Printer< ::mqtt_commx::fault_info_array_<ContainerAllocator> >::stream(s, indent + "  ", v.faults);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "mileage: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mileage);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "in_high_voltage: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.in_high_voltage);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "vin: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.vin);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "task_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.task_id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "navi_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.navi_id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "task_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.task_type);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "act_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.act_type);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "target: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.target);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "sub_target: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.sub_target);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MQTT_COMMX_MESSAGE_RESP_IOT_H
