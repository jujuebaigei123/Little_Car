// Generated by gencpp from file mqtt_commx/iot_path_point.msg
// DO NOT EDIT!


#ifndef MQTT_COMMX_MESSAGE_IOT_PATH_POINT_H
#define MQTT_COMMX_MESSAGE_IOT_PATH_POINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mqtt_commx
{
template <class ContainerAllocator>
struct iot_path_point_
{
  typedef iot_path_point_<ContainerAllocator> Type;

  iot_path_point_()
    : direction(0)
    , type(0)
    , driving_direction(0)
    , id()
    , speed_vmax(0.0)
    , vmax_dev(0.0)
    , lane_type(0)
    , pointX(0.0)
    , pointY(0.0)
    , pointHA(0.0)  {
    }
  iot_path_point_(const ContainerAllocator& _alloc)
    : direction(0)
    , type(0)
    , driving_direction(0)
    , id(_alloc)
    , speed_vmax(0.0)
    , vmax_dev(0.0)
    , lane_type(0)
    , pointX(0.0)
    , pointY(0.0)
    , pointHA(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _direction_type;
  _direction_type direction;

   typedef int32_t _type_type;
  _type_type type;

   typedef int32_t _driving_direction_type;
  _driving_direction_type driving_direction;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _id_type;
  _id_type id;

   typedef float _speed_vmax_type;
  _speed_vmax_type speed_vmax;

   typedef float _vmax_dev_type;
  _vmax_dev_type vmax_dev;

   typedef int32_t _lane_type_type;
  _lane_type_type lane_type;

   typedef double _pointX_type;
  _pointX_type pointX;

   typedef double _pointY_type;
  _pointY_type pointY;

   typedef double _pointHA_type;
  _pointHA_type pointHA;





  typedef boost::shared_ptr< ::mqtt_commx::iot_path_point_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mqtt_commx::iot_path_point_<ContainerAllocator> const> ConstPtr;

}; // struct iot_path_point_

typedef ::mqtt_commx::iot_path_point_<std::allocator<void> > iot_path_point;

typedef boost::shared_ptr< ::mqtt_commx::iot_path_point > iot_path_pointPtr;
typedef boost::shared_ptr< ::mqtt_commx::iot_path_point const> iot_path_pointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mqtt_commx::iot_path_point_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mqtt_commx::iot_path_point_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mqtt_commx::iot_path_point_<ContainerAllocator1> & lhs, const ::mqtt_commx::iot_path_point_<ContainerAllocator2> & rhs)
{
  return lhs.direction == rhs.direction &&
    lhs.type == rhs.type &&
    lhs.driving_direction == rhs.driving_direction &&
    lhs.id == rhs.id &&
    lhs.speed_vmax == rhs.speed_vmax &&
    lhs.vmax_dev == rhs.vmax_dev &&
    lhs.lane_type == rhs.lane_type &&
    lhs.pointX == rhs.pointX &&
    lhs.pointY == rhs.pointY &&
    lhs.pointHA == rhs.pointHA;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mqtt_commx::iot_path_point_<ContainerAllocator1> & lhs, const ::mqtt_commx::iot_path_point_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mqtt_commx

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mqtt_commx::iot_path_point_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mqtt_commx::iot_path_point_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mqtt_commx::iot_path_point_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mqtt_commx::iot_path_point_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mqtt_commx::iot_path_point_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mqtt_commx::iot_path_point_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mqtt_commx::iot_path_point_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f109249047779f0f5bde21421b2af811";
  }

  static const char* value(const ::mqtt_commx::iot_path_point_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf109249047779f0fULL;
  static const uint64_t static_value2 = 0x5bde21421b2af811ULL;
};

template<class ContainerAllocator>
struct DataType< ::mqtt_commx::iot_path_point_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mqtt_commx/iot_path_point";
  }

  static const char* value(const ::mqtt_commx::iot_path_point_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mqtt_commx::iot_path_point_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 direction\n"
"int32 type\n"
"int32 driving_direction\n"
"string id\n"
"float32 speed_vmax\n"
"float32 vmax_dev\n"
"int32 lane_type\n"
"\n"
"float64 pointX\n"
"float64 pointY\n"
"float64 pointHA\n"
;
  }

  static const char* value(const ::mqtt_commx::iot_path_point_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mqtt_commx::iot_path_point_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.direction);
      stream.next(m.type);
      stream.next(m.driving_direction);
      stream.next(m.id);
      stream.next(m.speed_vmax);
      stream.next(m.vmax_dev);
      stream.next(m.lane_type);
      stream.next(m.pointX);
      stream.next(m.pointY);
      stream.next(m.pointHA);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct iot_path_point_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mqtt_commx::iot_path_point_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mqtt_commx::iot_path_point_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "direction: ";
    Printer<int32_t>::stream(s, indent + "  ", v.direction);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "driving_direction: ";
    Printer<int32_t>::stream(s, indent + "  ", v.driving_direction);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "speed_vmax: ";
    Printer<float>::stream(s, indent + "  ", v.speed_vmax);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "vmax_dev: ";
    Printer<float>::stream(s, indent + "  ", v.vmax_dev);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "lane_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lane_type);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "pointX: ";
    Printer<double>::stream(s, indent + "  ", v.pointX);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "pointY: ";
    Printer<double>::stream(s, indent + "  ", v.pointY);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "pointHA: ";
    Printer<double>::stream(s, indent + "  ", v.pointHA);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MQTT_COMMX_MESSAGE_IOT_PATH_POINT_H
