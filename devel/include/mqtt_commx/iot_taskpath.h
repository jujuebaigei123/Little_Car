// Generated by gencpp from file mqtt_commx/iot_taskpath.msg
// DO NOT EDIT!


#ifndef MQTT_COMMX_MESSAGE_IOT_TASKPATH_H
#define MQTT_COMMX_MESSAGE_IOT_TASKPATH_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mqtt_commx/cmd_Header.h>
#include <mqtt_commx/iot_path_point.h>

namespace mqtt_commx
{
template <class ContainerAllocator>
struct iot_taskpath_
{
  typedef iot_taskpath_<ContainerAllocator> Type;

  iot_taskpath_()
    : header()
    , taskId()
    , navi_id()
    , seq_num(0)
    , route_direction(0)
    , dest_type(0)
    , path()
    , route_update(false)
    , is_final_navi(false)  {
    }
  iot_taskpath_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , taskId(_alloc)
    , navi_id(_alloc)
    , seq_num(0)
    , route_direction(0)
    , dest_type(0)
    , path(_alloc)
    , route_update(false)
    , is_final_navi(false)  {
  (void)_alloc;
    }



   typedef  ::mqtt_commx::cmd_Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _taskId_type;
  _taskId_type taskId;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _navi_id_type;
  _navi_id_type navi_id;

   typedef int32_t _seq_num_type;
  _seq_num_type seq_num;

   typedef int32_t _route_direction_type;
  _route_direction_type route_direction;

   typedef int32_t _dest_type_type;
  _dest_type_type dest_type;

   typedef std::vector< ::mqtt_commx::iot_path_point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::mqtt_commx::iot_path_point_<ContainerAllocator> >> _path_type;
  _path_type path;

   typedef uint8_t _route_update_type;
  _route_update_type route_update;

   typedef uint8_t _is_final_navi_type;
  _is_final_navi_type is_final_navi;





  typedef boost::shared_ptr< ::mqtt_commx::iot_taskpath_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mqtt_commx::iot_taskpath_<ContainerAllocator> const> ConstPtr;

}; // struct iot_taskpath_

typedef ::mqtt_commx::iot_taskpath_<std::allocator<void> > iot_taskpath;

typedef boost::shared_ptr< ::mqtt_commx::iot_taskpath > iot_taskpathPtr;
typedef boost::shared_ptr< ::mqtt_commx::iot_taskpath const> iot_taskpathConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mqtt_commx::iot_taskpath_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mqtt_commx::iot_taskpath_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mqtt_commx::iot_taskpath_<ContainerAllocator1> & lhs, const ::mqtt_commx::iot_taskpath_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.taskId == rhs.taskId &&
    lhs.navi_id == rhs.navi_id &&
    lhs.seq_num == rhs.seq_num &&
    lhs.route_direction == rhs.route_direction &&
    lhs.dest_type == rhs.dest_type &&
    lhs.path == rhs.path &&
    lhs.route_update == rhs.route_update &&
    lhs.is_final_navi == rhs.is_final_navi;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mqtt_commx::iot_taskpath_<ContainerAllocator1> & lhs, const ::mqtt_commx::iot_taskpath_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mqtt_commx

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mqtt_commx::iot_taskpath_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mqtt_commx::iot_taskpath_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mqtt_commx::iot_taskpath_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mqtt_commx::iot_taskpath_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mqtt_commx::iot_taskpath_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mqtt_commx::iot_taskpath_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mqtt_commx::iot_taskpath_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b090287600ee4263cb79e16674b501c4";
  }

  static const char* value(const ::mqtt_commx::iot_taskpath_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb090287600ee4263ULL;
  static const uint64_t static_value2 = 0xcb79e16674b501c4ULL;
};

template<class ContainerAllocator>
struct DataType< ::mqtt_commx::iot_taskpath_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mqtt_commx/iot_taskpath";
  }

  static const char* value(const ::mqtt_commx::iot_taskpath_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mqtt_commx::iot_taskpath_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cmd_Header header\n"
"\n"
"#task\n"
"string taskId             #作业任务的id\n"
"string navi_id            #导航任务编号\n"
"int32 seq_num             #顺序号\n"
"int32 route_direction     #路径方向\n"
"int32 dest_type           #目的地类型\n"
"iot_path_point[] path         #路径\n"
"bool route_update       \n"
"bool is_final_navi\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: mqtt_commx/cmd_Header\n"
"string trace_id\n"
"string trans_id\n"
"string che_id\n"
"string timestamp\n"
"string version\n"
"================================================================================\n"
"MSG: mqtt_commx/iot_path_point\n"
"int32 direction\n"
"int32 type\n"
"int32 driving_direction\n"
"string id\n"
"float32 speed_vmax\n"
"float32 vmax_dev\n"
"int32 lane_type\n"
"\n"
"float64 pointX\n"
"float64 pointY\n"
"float64 pointHA\n"
;
  }

  static const char* value(const ::mqtt_commx::iot_taskpath_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mqtt_commx::iot_taskpath_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.taskId);
      stream.next(m.navi_id);
      stream.next(m.seq_num);
      stream.next(m.route_direction);
      stream.next(m.dest_type);
      stream.next(m.path);
      stream.next(m.route_update);
      stream.next(m.is_final_navi);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct iot_taskpath_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mqtt_commx::iot_taskpath_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mqtt_commx::iot_taskpath_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::mqtt_commx::cmd_Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "taskId: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.taskId);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "navi_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.navi_id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "seq_num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.seq_num);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "route_direction: ";
    Printer<int32_t>::stream(s, indent + "  ", v.route_direction);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "dest_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dest_type);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "path: ";
    if (v.path.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.path.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::mqtt_commx::iot_path_point_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.path[i]);
    }
    if (v.path.empty() || false)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "route_update: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.route_update);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "is_final_navi: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_final_navi);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MQTT_COMMX_MESSAGE_IOT_TASKPATH_H
