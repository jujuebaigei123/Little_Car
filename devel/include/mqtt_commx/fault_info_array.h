// Generated by gencpp from file mqtt_commx/fault_info_array.msg
// DO NOT EDIT!


#ifndef MQTT_COMMX_MESSAGE_FAULT_INFO_ARRAY_H
#define MQTT_COMMX_MESSAGE_FAULT_INFO_ARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mqtt_commx/fault_info.h>

namespace mqtt_commx
{
template <class ContainerAllocator>
struct fault_info_array_
{
  typedef fault_info_array_<ContainerAllocator> Type;

  fault_info_array_()
    : fault_info_data()
    , timestamp(0)  {
    }
  fault_info_array_(const ContainerAllocator& _alloc)
    : fault_info_data(_alloc)
    , timestamp(0)  {
  (void)_alloc;
    }



   typedef std::vector< ::mqtt_commx::fault_info_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::mqtt_commx::fault_info_<ContainerAllocator> >> _fault_info_data_type;
  _fault_info_data_type fault_info_data;

   typedef int64_t _timestamp_type;
  _timestamp_type timestamp;





  typedef boost::shared_ptr< ::mqtt_commx::fault_info_array_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mqtt_commx::fault_info_array_<ContainerAllocator> const> ConstPtr;

}; // struct fault_info_array_

typedef ::mqtt_commx::fault_info_array_<std::allocator<void> > fault_info_array;

typedef boost::shared_ptr< ::mqtt_commx::fault_info_array > fault_info_arrayPtr;
typedef boost::shared_ptr< ::mqtt_commx::fault_info_array const> fault_info_arrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mqtt_commx::fault_info_array_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mqtt_commx::fault_info_array_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mqtt_commx::fault_info_array_<ContainerAllocator1> & lhs, const ::mqtt_commx::fault_info_array_<ContainerAllocator2> & rhs)
{
  return lhs.fault_info_data == rhs.fault_info_data &&
    lhs.timestamp == rhs.timestamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mqtt_commx::fault_info_array_<ContainerAllocator1> & lhs, const ::mqtt_commx::fault_info_array_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mqtt_commx

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mqtt_commx::fault_info_array_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mqtt_commx::fault_info_array_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mqtt_commx::fault_info_array_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mqtt_commx::fault_info_array_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mqtt_commx::fault_info_array_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mqtt_commx::fault_info_array_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mqtt_commx::fault_info_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3b519e6234e93bf86de021428c1d9d96";
  }

  static const char* value(const ::mqtt_commx::fault_info_array_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3b519e6234e93bf8ULL;
  static const uint64_t static_value2 = 0x6de021428c1d9d96ULL;
};

template<class ContainerAllocator>
struct DataType< ::mqtt_commx::fault_info_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mqtt_commx/fault_info_array";
  }

  static const char* value(const ::mqtt_commx::fault_info_array_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mqtt_commx::fault_info_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fault_info[] fault_info_data\n"
"int64 timestamp\n"
"================================================================================\n"
"MSG: mqtt_commx/fault_info\n"
"string desc\n"
"int64 code\n"
"int32 level\n"
;
  }

  static const char* value(const ::mqtt_commx::fault_info_array_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mqtt_commx::fault_info_array_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.fault_info_data);
      stream.next(m.timestamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct fault_info_array_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mqtt_commx::fault_info_array_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mqtt_commx::fault_info_array_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "fault_info_data: ";
    if (v.fault_info_data.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.fault_info_data.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::mqtt_commx::fault_info_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.fault_info_data[i]);
    }
    if (v.fault_info_data.empty() || false)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "timestamp: ";
    Printer<int64_t>::stream(s, indent + "  ", v.timestamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MQTT_COMMX_MESSAGE_FAULT_INFO_ARRAY_H
