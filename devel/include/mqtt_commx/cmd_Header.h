// Generated by gencpp from file mqtt_commx/cmd_Header.msg
// DO NOT EDIT!


#ifndef MQTT_COMMX_MESSAGE_CMD_HEADER_H
#define MQTT_COMMX_MESSAGE_CMD_HEADER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mqtt_commx
{
template <class ContainerAllocator>
struct cmd_Header_
{
  typedef cmd_Header_<ContainerAllocator> Type;

  cmd_Header_()
    : trace_id()
    , trans_id()
    , che_id()
    , timestamp()
    , version()  {
    }
  cmd_Header_(const ContainerAllocator& _alloc)
    : trace_id(_alloc)
    , trans_id(_alloc)
    , che_id(_alloc)
    , timestamp(_alloc)
    , version(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _trace_id_type;
  _trace_id_type trace_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _trans_id_type;
  _trans_id_type trans_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _che_id_type;
  _che_id_type che_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _timestamp_type;
  _timestamp_type timestamp;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _version_type;
  _version_type version;





  typedef boost::shared_ptr< ::mqtt_commx::cmd_Header_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mqtt_commx::cmd_Header_<ContainerAllocator> const> ConstPtr;

}; // struct cmd_Header_

typedef ::mqtt_commx::cmd_Header_<std::allocator<void> > cmd_Header;

typedef boost::shared_ptr< ::mqtt_commx::cmd_Header > cmd_HeaderPtr;
typedef boost::shared_ptr< ::mqtt_commx::cmd_Header const> cmd_HeaderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mqtt_commx::cmd_Header_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mqtt_commx::cmd_Header_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mqtt_commx::cmd_Header_<ContainerAllocator1> & lhs, const ::mqtt_commx::cmd_Header_<ContainerAllocator2> & rhs)
{
  return lhs.trace_id == rhs.trace_id &&
    lhs.trans_id == rhs.trans_id &&
    lhs.che_id == rhs.che_id &&
    lhs.timestamp == rhs.timestamp &&
    lhs.version == rhs.version;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mqtt_commx::cmd_Header_<ContainerAllocator1> & lhs, const ::mqtt_commx::cmd_Header_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mqtt_commx

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mqtt_commx::cmd_Header_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mqtt_commx::cmd_Header_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mqtt_commx::cmd_Header_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mqtt_commx::cmd_Header_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mqtt_commx::cmd_Header_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mqtt_commx::cmd_Header_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mqtt_commx::cmd_Header_<ContainerAllocator> >
{
  static const char* value()
  {
    return "66f32081d780bd2a95b49f4e58ebf381";
  }

  static const char* value(const ::mqtt_commx::cmd_Header_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x66f32081d780bd2aULL;
  static const uint64_t static_value2 = 0x95b49f4e58ebf381ULL;
};

template<class ContainerAllocator>
struct DataType< ::mqtt_commx::cmd_Header_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mqtt_commx/cmd_Header";
  }

  static const char* value(const ::mqtt_commx::cmd_Header_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mqtt_commx::cmd_Header_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string trace_id\n"
"string trans_id\n"
"string che_id\n"
"string timestamp\n"
"string version\n"
;
  }

  static const char* value(const ::mqtt_commx::cmd_Header_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mqtt_commx::cmd_Header_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.trace_id);
      stream.next(m.trans_id);
      stream.next(m.che_id);
      stream.next(m.timestamp);
      stream.next(m.version);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cmd_Header_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mqtt_commx::cmd_Header_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mqtt_commx::cmd_Header_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "trace_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.trace_id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "trans_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.trans_id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "che_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.che_id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "timestamp: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.timestamp);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "version: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.version);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MQTT_COMMX_MESSAGE_CMD_HEADER_H
