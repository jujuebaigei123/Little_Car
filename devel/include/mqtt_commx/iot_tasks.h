// Generated by gencpp from file mqtt_commx/iot_tasks.msg
// DO NOT EDIT!


#ifndef MQTT_COMMX_MESSAGE_IOT_TASKS_H
#define MQTT_COMMX_MESSAGE_IOT_TASKS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mqtt_commx/cmd_Header.h>

namespace mqtt_commx
{
template <class ContainerAllocator>
struct iot_tasks_
{
  typedef iot_tasks_<ContainerAllocator> Type;

  iot_tasks_()
    : header()
    , taskId()
    , taskType(0)
    , target()
    , sub_target()
    , targetX(0.0)
    , targetY(0.0)
    , targetHA(0.0)
    , cargoLength(0.0)
    , cargoWidth(0.0)
    , cargoHeight(0.0)
    , cargoId()  {
    }
  iot_tasks_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , taskId(_alloc)
    , taskType(0)
    , target(_alloc)
    , sub_target(_alloc)
    , targetX(0.0)
    , targetY(0.0)
    , targetHA(0.0)
    , cargoLength(0.0)
    , cargoWidth(0.0)
    , cargoHeight(0.0)
    , cargoId(_alloc)  {
  (void)_alloc;
    }



   typedef  ::mqtt_commx::cmd_Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _taskId_type;
  _taskId_type taskId;

   typedef int32_t _taskType_type;
  _taskType_type taskType;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _target_type;
  _target_type target;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _sub_target_type;
  _sub_target_type sub_target;

   typedef double _targetX_type;
  _targetX_type targetX;

   typedef double _targetY_type;
  _targetY_type targetY;

   typedef double _targetHA_type;
  _targetHA_type targetHA;

   typedef double _cargoLength_type;
  _cargoLength_type cargoLength;

   typedef double _cargoWidth_type;
  _cargoWidth_type cargoWidth;

   typedef double _cargoHeight_type;
  _cargoHeight_type cargoHeight;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _cargoId_type;
  _cargoId_type cargoId;





  typedef boost::shared_ptr< ::mqtt_commx::iot_tasks_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mqtt_commx::iot_tasks_<ContainerAllocator> const> ConstPtr;

}; // struct iot_tasks_

typedef ::mqtt_commx::iot_tasks_<std::allocator<void> > iot_tasks;

typedef boost::shared_ptr< ::mqtt_commx::iot_tasks > iot_tasksPtr;
typedef boost::shared_ptr< ::mqtt_commx::iot_tasks const> iot_tasksConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mqtt_commx::iot_tasks_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mqtt_commx::iot_tasks_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mqtt_commx::iot_tasks_<ContainerAllocator1> & lhs, const ::mqtt_commx::iot_tasks_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.taskId == rhs.taskId &&
    lhs.taskType == rhs.taskType &&
    lhs.target == rhs.target &&
    lhs.sub_target == rhs.sub_target &&
    lhs.targetX == rhs.targetX &&
    lhs.targetY == rhs.targetY &&
    lhs.targetHA == rhs.targetHA &&
    lhs.cargoLength == rhs.cargoLength &&
    lhs.cargoWidth == rhs.cargoWidth &&
    lhs.cargoHeight == rhs.cargoHeight &&
    lhs.cargoId == rhs.cargoId;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mqtt_commx::iot_tasks_<ContainerAllocator1> & lhs, const ::mqtt_commx::iot_tasks_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mqtt_commx

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mqtt_commx::iot_tasks_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mqtt_commx::iot_tasks_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mqtt_commx::iot_tasks_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mqtt_commx::iot_tasks_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mqtt_commx::iot_tasks_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mqtt_commx::iot_tasks_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mqtt_commx::iot_tasks_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e19a52af0fdaf396449227820a086c35";
  }

  static const char* value(const ::mqtt_commx::iot_tasks_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe19a52af0fdaf396ULL;
  static const uint64_t static_value2 = 0x449227820a086c35ULL;
};

template<class ContainerAllocator>
struct DataType< ::mqtt_commx::iot_tasks_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mqtt_commx/iot_tasks";
  }

  static const char* value(const ::mqtt_commx::iot_tasks_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mqtt_commx::iot_tasks_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cmd_Header header\n"
"\n"
"\n"
"#task\n"
"string taskId         #任务号\n"
"int32 taskType        #任务类型\n"
"string target         #任务大区\n"
"string sub_target     #车位号\n"
"float64 targetX       #目标x\n"
"float64 targetY       #目标y\n"
"float64 targetHA      #目标航相角\n"
"\n"
"float64 cargoLength   #商品车长宽高\n"
"float64 cargoWidth\n"
"float64 cargoHeight\n"
"\n"
"string cargoId        #商品车射频码\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: mqtt_commx/cmd_Header\n"
"string trace_id\n"
"string trans_id\n"
"string che_id\n"
"string timestamp\n"
"string version\n"
;
  }

  static const char* value(const ::mqtt_commx::iot_tasks_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mqtt_commx::iot_tasks_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.taskId);
      stream.next(m.taskType);
      stream.next(m.target);
      stream.next(m.sub_target);
      stream.next(m.targetX);
      stream.next(m.targetY);
      stream.next(m.targetHA);
      stream.next(m.cargoLength);
      stream.next(m.cargoWidth);
      stream.next(m.cargoHeight);
      stream.next(m.cargoId);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct iot_tasks_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mqtt_commx::iot_tasks_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mqtt_commx::iot_tasks_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::mqtt_commx::cmd_Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "taskId: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.taskId);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "taskType: ";
    Printer<int32_t>::stream(s, indent + "  ", v.taskType);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "target: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.target);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "sub_target: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.sub_target);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "targetX: ";
    Printer<double>::stream(s, indent + "  ", v.targetX);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "targetY: ";
    Printer<double>::stream(s, indent + "  ", v.targetY);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "targetHA: ";
    Printer<double>::stream(s, indent + "  ", v.targetHA);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "cargoLength: ";
    Printer<double>::stream(s, indent + "  ", v.cargoLength);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "cargoWidth: ";
    Printer<double>::stream(s, indent + "  ", v.cargoWidth);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "cargoHeight: ";
    Printer<double>::stream(s, indent + "  ", v.cargoHeight);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "cargoId: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.cargoId);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MQTT_COMMX_MESSAGE_IOT_TASKS_H
