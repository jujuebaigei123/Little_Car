// Generated by gencpp from file mqtt_commx/iot_controls.msg
// DO NOT EDIT!


#ifndef MQTT_COMMX_MESSAGE_IOT_CONTROLS_H
#define MQTT_COMMX_MESSAGE_IOT_CONTROLS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mqtt_commx/cmd_Header.h>

namespace mqtt_commx
{
template <class ContainerAllocator>
struct iot_controls_
{
  typedef iot_controls_<ContainerAllocator> Type;

  iot_controls_()
    : header()
    , taskId()
    , sender()
    , type(0)  {
    }
  iot_controls_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , taskId(_alloc)
    , sender(_alloc)
    , type(0)  {
  (void)_alloc;
    }



   typedef  ::mqtt_commx::cmd_Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _taskId_type;
  _taskId_type taskId;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _sender_type;
  _sender_type sender;

   typedef int64_t _type_type;
  _type_type type;





  typedef boost::shared_ptr< ::mqtt_commx::iot_controls_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mqtt_commx::iot_controls_<ContainerAllocator> const> ConstPtr;

}; // struct iot_controls_

typedef ::mqtt_commx::iot_controls_<std::allocator<void> > iot_controls;

typedef boost::shared_ptr< ::mqtt_commx::iot_controls > iot_controlsPtr;
typedef boost::shared_ptr< ::mqtt_commx::iot_controls const> iot_controlsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mqtt_commx::iot_controls_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mqtt_commx::iot_controls_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mqtt_commx::iot_controls_<ContainerAllocator1> & lhs, const ::mqtt_commx::iot_controls_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.taskId == rhs.taskId &&
    lhs.sender == rhs.sender &&
    lhs.type == rhs.type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mqtt_commx::iot_controls_<ContainerAllocator1> & lhs, const ::mqtt_commx::iot_controls_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mqtt_commx

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mqtt_commx::iot_controls_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mqtt_commx::iot_controls_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mqtt_commx::iot_controls_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mqtt_commx::iot_controls_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mqtt_commx::iot_controls_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mqtt_commx::iot_controls_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mqtt_commx::iot_controls_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b9b2f391bdff2d6855dabf27c7ac37e1";
  }

  static const char* value(const ::mqtt_commx::iot_controls_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb9b2f391bdff2d68ULL;
  static const uint64_t static_value2 = 0x55dabf27c7ac37e1ULL;
};

template<class ContainerAllocator>
struct DataType< ::mqtt_commx::iot_controls_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mqtt_commx/iot_controls";
  }

  static const char* value(const ::mqtt_commx::iot_controls_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mqtt_commx::iot_controls_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cmd_Header header\n"
"\n"
"\n"
"string taskId  #作业任务的id\n"
"string sender  #默认值\n"
"int64 type     #作业命令：急停1、完成任务2、取消任务3、恢复行驶5、缓停8\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: mqtt_commx/cmd_Header\n"
"string trace_id\n"
"string trans_id\n"
"string che_id\n"
"string timestamp\n"
"string version\n"
;
  }

  static const char* value(const ::mqtt_commx::iot_controls_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mqtt_commx::iot_controls_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.taskId);
      stream.next(m.sender);
      stream.next(m.type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct iot_controls_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mqtt_commx::iot_controls_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mqtt_commx::iot_controls_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::mqtt_commx::cmd_Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "taskId: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.taskId);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "sender: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.sender);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "type: ";
    Printer<int64_t>::stream(s, indent + "  ", v.type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MQTT_COMMX_MESSAGE_IOT_CONTROLS_H
