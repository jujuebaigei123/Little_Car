// Generated by gencpp from file mqtt_commx/act_status.msg
// DO NOT EDIT!


#ifndef MQTT_COMMX_MESSAGE_ACT_STATUS_H
#define MQTT_COMMX_MESSAGE_ACT_STATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mqtt_commx/cmd_Header.h>
#include <mqtt_commx/Point.h>
#include <mqtt_commx/fault_info.h>

namespace mqtt_commx
{
template <class ContainerAllocator>
struct act_status_
{
  typedef act_status_<ContainerAllocator> Type;

  act_status_()
    : header()
    , point()
    , faults()
    , act_type(0)
    , chassis_total_hour(0)
    , distance_to_target(0.0)
    , drv_direction(0)
    , empty(false)
    , estop(false)
    , firm_error_status(0)
    , frame_ts(0)
    , gear(0)
    , in_high_voltage(false)
    , is_charging(false)
    , mileage(0)
    , motion_mode(0)
    , navi_id()
    , operational_status(0)
    , platform_state(0)
    , soc(0)
    , soh(0)
    , speed(0.0)
    , state_flow(0)
    , sub_target()
    , target()
    , task_id()
    , task_mode(0)
    , task_type(0)
    , turn_light(0)
    , vehicle_error_status(0)
    , vin()  {
    }
  act_status_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , point(_alloc)
    , faults(_alloc)
    , act_type(0)
    , chassis_total_hour(0)
    , distance_to_target(0.0)
    , drv_direction(0)
    , empty(false)
    , estop(false)
    , firm_error_status(0)
    , frame_ts(0)
    , gear(0)
    , in_high_voltage(false)
    , is_charging(false)
    , mileage(0)
    , motion_mode(0)
    , navi_id(_alloc)
    , operational_status(0)
    , platform_state(0)
    , soc(0)
    , soh(0)
    , speed(0.0)
    , state_flow(0)
    , sub_target(_alloc)
    , target(_alloc)
    , task_id(_alloc)
    , task_mode(0)
    , task_type(0)
    , turn_light(0)
    , vehicle_error_status(0)
    , vin(_alloc)  {
  (void)_alloc;
    }



   typedef  ::mqtt_commx::cmd_Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::mqtt_commx::Point_<ContainerAllocator>  _point_type;
  _point_type point;

   typedef std::vector< ::mqtt_commx::fault_info_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::mqtt_commx::fault_info_<ContainerAllocator> >> _faults_type;
  _faults_type faults;

   typedef int64_t _act_type_type;
  _act_type_type act_type;

   typedef int64_t _chassis_total_hour_type;
  _chassis_total_hour_type chassis_total_hour;

   typedef double _distance_to_target_type;
  _distance_to_target_type distance_to_target;

   typedef int64_t _drv_direction_type;
  _drv_direction_type drv_direction;

   typedef uint8_t _empty_type;
  _empty_type empty;

   typedef uint8_t _estop_type;
  _estop_type estop;

   typedef int64_t _firm_error_status_type;
  _firm_error_status_type firm_error_status;

   typedef int64_t _frame_ts_type;
  _frame_ts_type frame_ts;

   typedef int64_t _gear_type;
  _gear_type gear;

   typedef uint8_t _in_high_voltage_type;
  _in_high_voltage_type in_high_voltage;

   typedef uint8_t _is_charging_type;
  _is_charging_type is_charging;

   typedef int64_t _mileage_type;
  _mileage_type mileage;

   typedef int64_t _motion_mode_type;
  _motion_mode_type motion_mode;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _navi_id_type;
  _navi_id_type navi_id;

   typedef int64_t _operational_status_type;
  _operational_status_type operational_status;

   typedef int64_t _platform_state_type;
  _platform_state_type platform_state;

   typedef int64_t _soc_type;
  _soc_type soc;

   typedef int64_t _soh_type;
  _soh_type soh;

   typedef double _speed_type;
  _speed_type speed;

   typedef int64_t _state_flow_type;
  _state_flow_type state_flow;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _sub_target_type;
  _sub_target_type sub_target;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _target_type;
  _target_type target;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _task_id_type;
  _task_id_type task_id;

   typedef int64_t _task_mode_type;
  _task_mode_type task_mode;

   typedef int64_t _task_type_type;
  _task_type_type task_type;

   typedef int64_t _turn_light_type;
  _turn_light_type turn_light;

   typedef int64_t _vehicle_error_status_type;
  _vehicle_error_status_type vehicle_error_status;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _vin_type;
  _vin_type vin;





  typedef boost::shared_ptr< ::mqtt_commx::act_status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mqtt_commx::act_status_<ContainerAllocator> const> ConstPtr;

}; // struct act_status_

typedef ::mqtt_commx::act_status_<std::allocator<void> > act_status;

typedef boost::shared_ptr< ::mqtt_commx::act_status > act_statusPtr;
typedef boost::shared_ptr< ::mqtt_commx::act_status const> act_statusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mqtt_commx::act_status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mqtt_commx::act_status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mqtt_commx::act_status_<ContainerAllocator1> & lhs, const ::mqtt_commx::act_status_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.point == rhs.point &&
    lhs.faults == rhs.faults &&
    lhs.act_type == rhs.act_type &&
    lhs.chassis_total_hour == rhs.chassis_total_hour &&
    lhs.distance_to_target == rhs.distance_to_target &&
    lhs.drv_direction == rhs.drv_direction &&
    lhs.empty == rhs.empty &&
    lhs.estop == rhs.estop &&
    lhs.firm_error_status == rhs.firm_error_status &&
    lhs.frame_ts == rhs.frame_ts &&
    lhs.gear == rhs.gear &&
    lhs.in_high_voltage == rhs.in_high_voltage &&
    lhs.is_charging == rhs.is_charging &&
    lhs.mileage == rhs.mileage &&
    lhs.motion_mode == rhs.motion_mode &&
    lhs.navi_id == rhs.navi_id &&
    lhs.operational_status == rhs.operational_status &&
    lhs.platform_state == rhs.platform_state &&
    lhs.soc == rhs.soc &&
    lhs.soh == rhs.soh &&
    lhs.speed == rhs.speed &&
    lhs.state_flow == rhs.state_flow &&
    lhs.sub_target == rhs.sub_target &&
    lhs.target == rhs.target &&
    lhs.task_id == rhs.task_id &&
    lhs.task_mode == rhs.task_mode &&
    lhs.task_type == rhs.task_type &&
    lhs.turn_light == rhs.turn_light &&
    lhs.vehicle_error_status == rhs.vehicle_error_status &&
    lhs.vin == rhs.vin;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mqtt_commx::act_status_<ContainerAllocator1> & lhs, const ::mqtt_commx::act_status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mqtt_commx

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mqtt_commx::act_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mqtt_commx::act_status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mqtt_commx::act_status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mqtt_commx::act_status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mqtt_commx::act_status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mqtt_commx::act_status_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mqtt_commx::act_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3a229cb3686a6eb829168e6cd0fe7cda";
  }

  static const char* value(const ::mqtt_commx::act_status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3a229cb3686a6eb8ULL;
  static const uint64_t static_value2 = 0x29168e6cd0fe7cdaULL;
};

template<class ContainerAllocator>
struct DataType< ::mqtt_commx::act_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mqtt_commx/act_status";
  }

  static const char* value(const ::mqtt_commx::act_status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mqtt_commx::act_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cmd_Header header\n"
"Point point\n"
"fault_info[]  faults\n"
"\n"
"int64 act_type\n"
"int64 chassis_total_hour\n"
"float64 distance_to_target\n"
"int64 drv_direction\n"
"bool empty\n"
"bool estop\n"
"int64 firm_error_status\n"
"int64 frame_ts\n"
"int64 gear\n"
"bool in_high_voltage    # 取车状态\n"
"bool is_charging\n"
"int64 mileage\n"
"int64 motion_mode\n"
"string navi_id\n"
"int64 operational_status\n"
"int64 platform_state\n"
"int64 soc\n"
"int64 soh\n"
"float64 speed\n"
"int64 state_flow\n"
"string sub_target\n"
"string target\n"
"string task_id\n"
"int64 task_mode\n"
"int64 task_type\n"
"int64 turn_light\n"
"int64 vehicle_error_status\n"
"string vin\n"
"\n"
"================================================================================\n"
"MSG: mqtt_commx/cmd_Header\n"
"string trace_id\n"
"string trans_id\n"
"string che_id\n"
"string timestamp\n"
"string version\n"
"================================================================================\n"
"MSG: mqtt_commx/Point\n"
"float64 x\n"
"float64 y\n"
"float64 yaw\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: mqtt_commx/fault_info\n"
"string desc\n"
"int64 code\n"
"int32 level\n"
;
  }

  static const char* value(const ::mqtt_commx::act_status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mqtt_commx::act_status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.point);
      stream.next(m.faults);
      stream.next(m.act_type);
      stream.next(m.chassis_total_hour);
      stream.next(m.distance_to_target);
      stream.next(m.drv_direction);
      stream.next(m.empty);
      stream.next(m.estop);
      stream.next(m.firm_error_status);
      stream.next(m.frame_ts);
      stream.next(m.gear);
      stream.next(m.in_high_voltage);
      stream.next(m.is_charging);
      stream.next(m.mileage);
      stream.next(m.motion_mode);
      stream.next(m.navi_id);
      stream.next(m.operational_status);
      stream.next(m.platform_state);
      stream.next(m.soc);
      stream.next(m.soh);
      stream.next(m.speed);
      stream.next(m.state_flow);
      stream.next(m.sub_target);
      stream.next(m.target);
      stream.next(m.task_id);
      stream.next(m.task_mode);
      stream.next(m.task_type);
      stream.next(m.turn_light);
      stream.next(m.vehicle_error_status);
      stream.next(m.vin);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct act_status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mqtt_commx::act_status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mqtt_commx::act_status_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::mqtt_commx::cmd_Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "point: ";
    Printer< ::mqtt_commx::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.point);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "faults: ";
    if (v.faults.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.faults.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::mqtt_commx::fault_info_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.faults[i]);
    }
    if (v.faults.empty() || false)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "act_type: ";
    Printer<int64_t>::stream(s, indent + "  ", v.act_type);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "chassis_total_hour: ";
    Printer<int64_t>::stream(s, indent + "  ", v.chassis_total_hour);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "distance_to_target: ";
    Printer<double>::stream(s, indent + "  ", v.distance_to_target);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "drv_direction: ";
    Printer<int64_t>::stream(s, indent + "  ", v.drv_direction);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "empty: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.empty);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "estop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.estop);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "firm_error_status: ";
    Printer<int64_t>::stream(s, indent + "  ", v.firm_error_status);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "frame_ts: ";
    Printer<int64_t>::stream(s, indent + "  ", v.frame_ts);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "gear: ";
    Printer<int64_t>::stream(s, indent + "  ", v.gear);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "in_high_voltage: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.in_high_voltage);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "is_charging: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_charging);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "mileage: ";
    Printer<int64_t>::stream(s, indent + "  ", v.mileage);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "motion_mode: ";
    Printer<int64_t>::stream(s, indent + "  ", v.motion_mode);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "navi_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.navi_id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "operational_status: ";
    Printer<int64_t>::stream(s, indent + "  ", v.operational_status);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "platform_state: ";
    Printer<int64_t>::stream(s, indent + "  ", v.platform_state);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "soc: ";
    Printer<int64_t>::stream(s, indent + "  ", v.soc);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "soh: ";
    Printer<int64_t>::stream(s, indent + "  ", v.soh);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "state_flow: ";
    Printer<int64_t>::stream(s, indent + "  ", v.state_flow);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "sub_target: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.sub_target);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "target: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.target);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "task_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.task_id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "task_mode: ";
    Printer<int64_t>::stream(s, indent + "  ", v.task_mode);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "task_type: ";
    Printer<int64_t>::stream(s, indent + "  ", v.task_type);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "turn_light: ";
    Printer<int64_t>::stream(s, indent + "  ", v.turn_light);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "vehicle_error_status: ";
    Printer<int64_t>::stream(s, indent + "  ", v.vehicle_error_status);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "vin: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.vin);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MQTT_COMMX_MESSAGE_ACT_STATUS_H
