// Generated by gencpp from file mqtt_commx/path_point.msg
// DO NOT EDIT!


#ifndef MQTT_COMMX_MESSAGE_PATH_POINT_H
#define MQTT_COMMX_MESSAGE_PATH_POINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mqtt_commx
{
template <class ContainerAllocator>
struct path_point_
{
  typedef path_point_<ContainerAllocator> Type;

  path_point_()
    : id()
    , pointX(0.0)
    , pointY(0.0)
    , pointHA(0.0)
    , vehSpeed(0.0)  {
    }
  path_point_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , pointX(0.0)
    , pointY(0.0)
    , pointHA(0.0)
    , vehSpeed(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _id_type;
  _id_type id;

   typedef double _pointX_type;
  _pointX_type pointX;

   typedef double _pointY_type;
  _pointY_type pointY;

   typedef double _pointHA_type;
  _pointHA_type pointHA;

   typedef float _vehSpeed_type;
  _vehSpeed_type vehSpeed;





  typedef boost::shared_ptr< ::mqtt_commx::path_point_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mqtt_commx::path_point_<ContainerAllocator> const> ConstPtr;

}; // struct path_point_

typedef ::mqtt_commx::path_point_<std::allocator<void> > path_point;

typedef boost::shared_ptr< ::mqtt_commx::path_point > path_pointPtr;
typedef boost::shared_ptr< ::mqtt_commx::path_point const> path_pointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mqtt_commx::path_point_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mqtt_commx::path_point_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mqtt_commx::path_point_<ContainerAllocator1> & lhs, const ::mqtt_commx::path_point_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.pointX == rhs.pointX &&
    lhs.pointY == rhs.pointY &&
    lhs.pointHA == rhs.pointHA &&
    lhs.vehSpeed == rhs.vehSpeed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mqtt_commx::path_point_<ContainerAllocator1> & lhs, const ::mqtt_commx::path_point_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mqtt_commx

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mqtt_commx::path_point_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mqtt_commx::path_point_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mqtt_commx::path_point_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mqtt_commx::path_point_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mqtt_commx::path_point_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mqtt_commx::path_point_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mqtt_commx::path_point_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8408613975c254abac6a9cd9adbad530";
  }

  static const char* value(const ::mqtt_commx::path_point_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8408613975c254abULL;
  static const uint64_t static_value2 = 0xac6a9cd9adbad530ULL;
};

template<class ContainerAllocator>
struct DataType< ::mqtt_commx::path_point_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mqtt_commx/path_point";
  }

  static const char* value(const ::mqtt_commx::path_point_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mqtt_commx::path_point_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string id\n"
"float64 pointX\n"
"float64 pointY\n"
"float64 pointHA\n"
"float32 vehSpeed\n"
;
  }

  static const char* value(const ::mqtt_commx::path_point_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mqtt_commx::path_point_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.pointX);
      stream.next(m.pointY);
      stream.next(m.pointHA);
      stream.next(m.vehSpeed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct path_point_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mqtt_commx::path_point_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mqtt_commx::path_point_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "pointX: ";
    Printer<double>::stream(s, indent + "  ", v.pointX);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "pointY: ";
    Printer<double>::stream(s, indent + "  ", v.pointY);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "pointHA: ";
    Printer<double>::stream(s, indent + "  ", v.pointHA);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "vehSpeed: ";
    Printer<float>::stream(s, indent + "  ", v.vehSpeed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MQTT_COMMX_MESSAGE_PATH_POINT_H
