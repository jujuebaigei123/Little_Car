// Generated by gencpp from file gps/MyGPS_msg.msg
// DO NOT EDIT!


#ifndef GPS_MESSAGE_MYGPS_MSG_H
#define GPS_MESSAGE_MYGPS_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace gps
{
template <class ContainerAllocator>
struct MyGPS_msg_
{
  typedef MyGPS_msg_<ContainerAllocator> Type;

  MyGPS_msg_()
    : header()
    , Lat(0.0)
    , Lon(0.0)
    , UTM_X(0.0)
    , UTM_Y(0.0)
    , Angle(0.0)
    , map_x(0.0)
    , map_y(0.0)
    , raw_UTM_X(0.0)
    , raw_UTM_Y(0.0)
    , raw_Angle(0.0)
    , raw_map_x(0.0)
    , raw_map_y(0.0)
    , mqtt_angle(0.0)
    , Vel(0.0)
    , Quality(0)
    , HeartBeat(0)  {
    }
  MyGPS_msg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , Lat(0.0)
    , Lon(0.0)
    , UTM_X(0.0)
    , UTM_Y(0.0)
    , Angle(0.0)
    , map_x(0.0)
    , map_y(0.0)
    , raw_UTM_X(0.0)
    , raw_UTM_Y(0.0)
    , raw_Angle(0.0)
    , raw_map_x(0.0)
    , raw_map_y(0.0)
    , mqtt_angle(0.0)
    , Vel(0.0)
    , Quality(0)
    , HeartBeat(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _Lat_type;
  _Lat_type Lat;

   typedef double _Lon_type;
  _Lon_type Lon;

   typedef double _UTM_X_type;
  _UTM_X_type UTM_X;

   typedef double _UTM_Y_type;
  _UTM_Y_type UTM_Y;

   typedef double _Angle_type;
  _Angle_type Angle;

   typedef double _map_x_type;
  _map_x_type map_x;

   typedef double _map_y_type;
  _map_y_type map_y;

   typedef double _raw_UTM_X_type;
  _raw_UTM_X_type raw_UTM_X;

   typedef double _raw_UTM_Y_type;
  _raw_UTM_Y_type raw_UTM_Y;

   typedef double _raw_Angle_type;
  _raw_Angle_type raw_Angle;

   typedef double _raw_map_x_type;
  _raw_map_x_type raw_map_x;

   typedef double _raw_map_y_type;
  _raw_map_y_type raw_map_y;

   typedef double _mqtt_angle_type;
  _mqtt_angle_type mqtt_angle;

   typedef double _Vel_type;
  _Vel_type Vel;

   typedef int8_t _Quality_type;
  _Quality_type Quality;

   typedef int8_t _HeartBeat_type;
  _HeartBeat_type HeartBeat;





  typedef boost::shared_ptr< ::gps::MyGPS_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gps::MyGPS_msg_<ContainerAllocator> const> ConstPtr;

}; // struct MyGPS_msg_

typedef ::gps::MyGPS_msg_<std::allocator<void> > MyGPS_msg;

typedef boost::shared_ptr< ::gps::MyGPS_msg > MyGPS_msgPtr;
typedef boost::shared_ptr< ::gps::MyGPS_msg const> MyGPS_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gps::MyGPS_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gps::MyGPS_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gps::MyGPS_msg_<ContainerAllocator1> & lhs, const ::gps::MyGPS_msg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.Lat == rhs.Lat &&
    lhs.Lon == rhs.Lon &&
    lhs.UTM_X == rhs.UTM_X &&
    lhs.UTM_Y == rhs.UTM_Y &&
    lhs.Angle == rhs.Angle &&
    lhs.map_x == rhs.map_x &&
    lhs.map_y == rhs.map_y &&
    lhs.raw_UTM_X == rhs.raw_UTM_X &&
    lhs.raw_UTM_Y == rhs.raw_UTM_Y &&
    lhs.raw_Angle == rhs.raw_Angle &&
    lhs.raw_map_x == rhs.raw_map_x &&
    lhs.raw_map_y == rhs.raw_map_y &&
    lhs.mqtt_angle == rhs.mqtt_angle &&
    lhs.Vel == rhs.Vel &&
    lhs.Quality == rhs.Quality &&
    lhs.HeartBeat == rhs.HeartBeat;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gps::MyGPS_msg_<ContainerAllocator1> & lhs, const ::gps::MyGPS_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gps

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gps::MyGPS_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gps::MyGPS_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gps::MyGPS_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gps::MyGPS_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gps::MyGPS_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gps::MyGPS_msg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gps::MyGPS_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "026ac90c0e99c71302e8b4f4029817a8";
  }

  static const char* value(const ::gps::MyGPS_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x026ac90c0e99c713ULL;
  static const uint64_t static_value2 = 0x02e8b4f4029817a8ULL;
};

template<class ContainerAllocator>
struct DataType< ::gps::MyGPS_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gps/MyGPS_msg";
  }

  static const char* value(const ::gps::MyGPS_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gps::MyGPS_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header \n"
"float64 Lat\n"
"float64 Lon\n"
"float64 UTM_X\n"
"float64 UTM_Y\n"
"float64 Angle\n"
"float64 map_x\n"
"float64 map_y\n"
"\n"
"float64 raw_UTM_X\n"
"float64 raw_UTM_Y\n"
"float64 raw_Angle\n"
"float64 raw_map_x\n"
"float64 raw_map_y\n"
"\n"
"float64 mqtt_angle\n"
"\n"
"float64 Vel\n"
"int8 Quality\n"
"int8 HeartBeat\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::gps::MyGPS_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gps::MyGPS_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.Lat);
      stream.next(m.Lon);
      stream.next(m.UTM_X);
      stream.next(m.UTM_Y);
      stream.next(m.Angle);
      stream.next(m.map_x);
      stream.next(m.map_y);
      stream.next(m.raw_UTM_X);
      stream.next(m.raw_UTM_Y);
      stream.next(m.raw_Angle);
      stream.next(m.raw_map_x);
      stream.next(m.raw_map_y);
      stream.next(m.mqtt_angle);
      stream.next(m.Vel);
      stream.next(m.Quality);
      stream.next(m.HeartBeat);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MyGPS_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gps::MyGPS_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gps::MyGPS_msg_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "Lat: ";
    Printer<double>::stream(s, indent + "  ", v.Lat);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "Lon: ";
    Printer<double>::stream(s, indent + "  ", v.Lon);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "UTM_X: ";
    Printer<double>::stream(s, indent + "  ", v.UTM_X);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "UTM_Y: ";
    Printer<double>::stream(s, indent + "  ", v.UTM_Y);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "Angle: ";
    Printer<double>::stream(s, indent + "  ", v.Angle);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "map_x: ";
    Printer<double>::stream(s, indent + "  ", v.map_x);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "map_y: ";
    Printer<double>::stream(s, indent + "  ", v.map_y);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "raw_UTM_X: ";
    Printer<double>::stream(s, indent + "  ", v.raw_UTM_X);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "raw_UTM_Y: ";
    Printer<double>::stream(s, indent + "  ", v.raw_UTM_Y);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "raw_Angle: ";
    Printer<double>::stream(s, indent + "  ", v.raw_Angle);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "raw_map_x: ";
    Printer<double>::stream(s, indent + "  ", v.raw_map_x);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "raw_map_y: ";
    Printer<double>::stream(s, indent + "  ", v.raw_map_y);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "mqtt_angle: ";
    Printer<double>::stream(s, indent + "  ", v.mqtt_angle);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "Vel: ";
    Printer<double>::stream(s, indent + "  ", v.Vel);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "Quality: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Quality);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "HeartBeat: ";
    Printer<int8_t>::stream(s, indent + "  ", v.HeartBeat);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GPS_MESSAGE_MYGPS_MSG_H
