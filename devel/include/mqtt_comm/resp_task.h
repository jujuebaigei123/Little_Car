// Generated by gencpp from file mqtt_comm/resp_task.msg
// DO NOT EDIT!


#ifndef MQTT_COMM_MESSAGE_RESP_TASK_H
#define MQTT_COMM_MESSAGE_RESP_TASK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mqtt_comm
{
template <class ContainerAllocator>
struct resp_task_
{
  typedef resp_task_<ContainerAllocator> Type;

  resp_task_()
    : msgType()
    , agvId()
    , timestamp(0)
    , taskId(0)
    , subTaskIndex(0)  {
    }
  resp_task_(const ContainerAllocator& _alloc)
    : msgType(_alloc)
    , agvId(_alloc)
    , timestamp(0)
    , taskId(0)
    , subTaskIndex(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _msgType_type;
  _msgType_type msgType;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _agvId_type;
  _agvId_type agvId;

   typedef int64_t _timestamp_type;
  _timestamp_type timestamp;

   typedef int32_t _taskId_type;
  _taskId_type taskId;

   typedef int32_t _subTaskIndex_type;
  _subTaskIndex_type subTaskIndex;





  typedef boost::shared_ptr< ::mqtt_comm::resp_task_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mqtt_comm::resp_task_<ContainerAllocator> const> ConstPtr;

}; // struct resp_task_

typedef ::mqtt_comm::resp_task_<std::allocator<void> > resp_task;

typedef boost::shared_ptr< ::mqtt_comm::resp_task > resp_taskPtr;
typedef boost::shared_ptr< ::mqtt_comm::resp_task const> resp_taskConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mqtt_comm::resp_task_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mqtt_comm::resp_task_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mqtt_comm::resp_task_<ContainerAllocator1> & lhs, const ::mqtt_comm::resp_task_<ContainerAllocator2> & rhs)
{
  return lhs.msgType == rhs.msgType &&
    lhs.agvId == rhs.agvId &&
    lhs.timestamp == rhs.timestamp &&
    lhs.taskId == rhs.taskId &&
    lhs.subTaskIndex == rhs.subTaskIndex;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mqtt_comm::resp_task_<ContainerAllocator1> & lhs, const ::mqtt_comm::resp_task_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mqtt_comm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mqtt_comm::resp_task_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mqtt_comm::resp_task_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mqtt_comm::resp_task_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mqtt_comm::resp_task_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mqtt_comm::resp_task_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mqtt_comm::resp_task_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mqtt_comm::resp_task_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f2056e3d4cb90d20081cfa1340bb02a1";
  }

  static const char* value(const ::mqtt_comm::resp_task_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf2056e3d4cb90d20ULL;
  static const uint64_t static_value2 = 0x081cfa1340bb02a1ULL;
};

template<class ContainerAllocator>
struct DataType< ::mqtt_comm::resp_task_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mqtt_comm/resp_task";
  }

  static const char* value(const ::mqtt_comm::resp_task_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mqtt_comm::resp_task_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string msgType\n"
"string agvId\n"
"int64 timestamp\n"
"# recvtask_value value\n"
"int32 taskId\n"
"int32 subTaskIndex\n"
"\n"
"\n"
"\n"
;
  }

  static const char* value(const ::mqtt_comm::resp_task_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mqtt_comm::resp_task_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.msgType);
      stream.next(m.agvId);
      stream.next(m.timestamp);
      stream.next(m.taskId);
      stream.next(m.subTaskIndex);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct resp_task_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mqtt_comm::resp_task_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mqtt_comm::resp_task_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "msgType: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.msgType);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "agvId: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.agvId);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "timestamp: ";
    Printer<int64_t>::stream(s, indent + "  ", v.timestamp);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "taskId: ";
    Printer<int32_t>::stream(s, indent + "  ", v.taskId);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "subTaskIndex: ";
    Printer<int32_t>::stream(s, indent + "  ", v.subTaskIndex);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MQTT_COMM_MESSAGE_RESP_TASK_H
