// Generated by gencpp from file mqtt_comm/path_point_action.msg
// DO NOT EDIT!


#ifndef MQTT_COMM_MESSAGE_PATH_POINT_ACTION_H
#define MQTT_COMM_MESSAGE_PATH_POINT_ACTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mqtt_comm
{
template <class ContainerAllocator>
struct path_point_action_
{
  typedef path_point_action_<ContainerAllocator> Type;

  path_point_action_()
    : caption()
    , params()  {
    }
  path_point_action_(const ContainerAllocator& _alloc)
    : caption(_alloc)
    , params(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _caption_type;
  _caption_type caption;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _params_type;
  _params_type params;





  typedef boost::shared_ptr< ::mqtt_comm::path_point_action_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mqtt_comm::path_point_action_<ContainerAllocator> const> ConstPtr;

}; // struct path_point_action_

typedef ::mqtt_comm::path_point_action_<std::allocator<void> > path_point_action;

typedef boost::shared_ptr< ::mqtt_comm::path_point_action > path_point_actionPtr;
typedef boost::shared_ptr< ::mqtt_comm::path_point_action const> path_point_actionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mqtt_comm::path_point_action_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mqtt_comm::path_point_action_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mqtt_comm::path_point_action_<ContainerAllocator1> & lhs, const ::mqtt_comm::path_point_action_<ContainerAllocator2> & rhs)
{
  return lhs.caption == rhs.caption &&
    lhs.params == rhs.params;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mqtt_comm::path_point_action_<ContainerAllocator1> & lhs, const ::mqtt_comm::path_point_action_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mqtt_comm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mqtt_comm::path_point_action_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mqtt_comm::path_point_action_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mqtt_comm::path_point_action_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mqtt_comm::path_point_action_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mqtt_comm::path_point_action_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mqtt_comm::path_point_action_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mqtt_comm::path_point_action_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a5673b402e1654274f346fe24f513dd3";
  }

  static const char* value(const ::mqtt_comm::path_point_action_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa5673b402e165427ULL;
  static const uint64_t static_value2 = 0x4f346fe24f513dd3ULL;
};

template<class ContainerAllocator>
struct DataType< ::mqtt_comm::path_point_action_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mqtt_comm/path_point_action";
  }

  static const char* value(const ::mqtt_comm::path_point_action_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mqtt_comm::path_point_action_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string caption\n"
"float32[] params\n"
"\n"
"\n"
;
  }

  static const char* value(const ::mqtt_comm::path_point_action_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mqtt_comm::path_point_action_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.caption);
      stream.next(m.params);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct path_point_action_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mqtt_comm::path_point_action_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mqtt_comm::path_point_action_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "caption: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.caption);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "params: ";
    if (v.params.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.params.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<float>::stream(s, true ? std::string() : indent + "    ", v.params[i]);
    }
    if (v.params.empty() || true)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // MQTT_COMM_MESSAGE_PATH_POINT_ACTION_H
