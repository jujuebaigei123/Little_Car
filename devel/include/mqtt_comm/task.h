// Generated by gencpp from file mqtt_comm/task.msg
// DO NOT EDIT!


#ifndef MQTT_COMM_MESSAGE_TASK_H
#define MQTT_COMM_MESSAGE_TASK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mqtt_comm/path_point.h>

namespace mqtt_comm
{
template <class ContainerAllocator>
struct task_
{
  typedef task_<ContainerAllocator> Type;

  task_()
    : stamp()
    , taskId()
    , cmd()
    , subcmd()
    , final_path(false)
    , only_akm(false)
    , accordingPathdir(false)
    , path()  {
    }
  task_(const ContainerAllocator& _alloc)
    : stamp()
    , taskId(_alloc)
    , cmd(_alloc)
    , subcmd(_alloc)
    , final_path(false)
    , only_akm(false)
    , accordingPathdir(false)
    , path(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _taskId_type;
  _taskId_type taskId;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _cmd_type;
  _cmd_type cmd;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _subcmd_type;
  _subcmd_type subcmd;

   typedef uint8_t _final_path_type;
  _final_path_type final_path;

   typedef uint8_t _only_akm_type;
  _only_akm_type only_akm;

   typedef uint8_t _accordingPathdir_type;
  _accordingPathdir_type accordingPathdir;

   typedef std::vector< ::mqtt_comm::path_point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::mqtt_comm::path_point_<ContainerAllocator> >> _path_type;
  _path_type path;





  typedef boost::shared_ptr< ::mqtt_comm::task_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mqtt_comm::task_<ContainerAllocator> const> ConstPtr;

}; // struct task_

typedef ::mqtt_comm::task_<std::allocator<void> > task;

typedef boost::shared_ptr< ::mqtt_comm::task > taskPtr;
typedef boost::shared_ptr< ::mqtt_comm::task const> taskConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mqtt_comm::task_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mqtt_comm::task_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mqtt_comm::task_<ContainerAllocator1> & lhs, const ::mqtt_comm::task_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.taskId == rhs.taskId &&
    lhs.cmd == rhs.cmd &&
    lhs.subcmd == rhs.subcmd &&
    lhs.final_path == rhs.final_path &&
    lhs.only_akm == rhs.only_akm &&
    lhs.accordingPathdir == rhs.accordingPathdir &&
    lhs.path == rhs.path;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mqtt_comm::task_<ContainerAllocator1> & lhs, const ::mqtt_comm::task_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mqtt_comm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mqtt_comm::task_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mqtt_comm::task_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mqtt_comm::task_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mqtt_comm::task_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mqtt_comm::task_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mqtt_comm::task_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mqtt_comm::task_<ContainerAllocator> >
{
  static const char* value()
  {
    return "56ba4c02399269a508181e421f1e9b96";
  }

  static const char* value(const ::mqtt_comm::task_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x56ba4c02399269a5ULL;
  static const uint64_t static_value2 = 0x08181e421f1e9b96ULL;
};

template<class ContainerAllocator>
struct DataType< ::mqtt_comm::task_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mqtt_comm/task";
  }

  static const char* value(const ::mqtt_comm::task_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mqtt_comm::task_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n"
"string taskId\n"
"string cmd\n"
"string subcmd\n"
"bool final_path\n"
"bool only_akm\n"
"bool accordingPathdir\n"
"path_point[] path\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: mqtt_comm/path_point\n"
"float32 vehSpeed\n"
"float64 pointX\n"
"float64 pointY\n"
"float64 pointHA\n"
"bool actEnable\n"
"string caption\n"
"path_point_action[] actions\n"
"float32[] if_point1\n"
"float32[] if_point2\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: mqtt_comm/path_point_action\n"
"string caption\n"
"float32[] params\n"
"\n"
"\n"
;
  }

  static const char* value(const ::mqtt_comm::task_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mqtt_comm::task_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.taskId);
      stream.next(m.cmd);
      stream.next(m.subcmd);
      stream.next(m.final_path);
      stream.next(m.only_akm);
      stream.next(m.accordingPathdir);
      stream.next(m.path);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct task_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mqtt_comm::task_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mqtt_comm::task_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "taskId: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.taskId);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "cmd: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.cmd);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "subcmd: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.subcmd);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "final_path: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.final_path);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "only_akm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.only_akm);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "accordingPathdir: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.accordingPathdir);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "path: ";
    if (v.path.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.path.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::mqtt_comm::path_point_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.path[i]);
    }
    if (v.path.empty() || false)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // MQTT_COMM_MESSAGE_TASK_H
