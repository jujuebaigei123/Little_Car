// Generated by gencpp from file pathtrack/track_state.msg
// DO NOT EDIT!


#ifndef PATHTRACK_MESSAGE_TRACK_STATE_H
#define PATHTRACK_MESSAGE_TRACK_STATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pathtrack
{
template <class ContainerAllocator>
struct track_state_
{
  typedef track_state_<ContainerAllocator> Type;

  track_state_()
    : timestamp(0)
    , stopReason()
    , self_turn_ctr(0)
    , turnmode_ctr(0)
    , track_angle_err(0.0)
    , track_dis_err(0.0)
    , aim_range(0.0)
    , steering_property(0.0)  {
    }
  track_state_(const ContainerAllocator& _alloc)
    : timestamp(0)
    , stopReason(_alloc)
    , self_turn_ctr(0)
    , turnmode_ctr(0)
    , track_angle_err(0.0)
    , track_dis_err(0.0)
    , aim_range(0.0)
    , steering_property(0.0)  {
  (void)_alloc;
    }



   typedef int64_t _timestamp_type;
  _timestamp_type timestamp;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _stopReason_type;
  _stopReason_type stopReason;

   typedef int32_t _self_turn_ctr_type;
  _self_turn_ctr_type self_turn_ctr;

   typedef int32_t _turnmode_ctr_type;
  _turnmode_ctr_type turnmode_ctr;

   typedef float _track_angle_err_type;
  _track_angle_err_type track_angle_err;

   typedef float _track_dis_err_type;
  _track_dis_err_type track_dis_err;

   typedef float _aim_range_type;
  _aim_range_type aim_range;

   typedef float _steering_property_type;
  _steering_property_type steering_property;





  typedef boost::shared_ptr< ::pathtrack::track_state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pathtrack::track_state_<ContainerAllocator> const> ConstPtr;

}; // struct track_state_

typedef ::pathtrack::track_state_<std::allocator<void> > track_state;

typedef boost::shared_ptr< ::pathtrack::track_state > track_statePtr;
typedef boost::shared_ptr< ::pathtrack::track_state const> track_stateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pathtrack::track_state_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pathtrack::track_state_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pathtrack::track_state_<ContainerAllocator1> & lhs, const ::pathtrack::track_state_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.stopReason == rhs.stopReason &&
    lhs.self_turn_ctr == rhs.self_turn_ctr &&
    lhs.turnmode_ctr == rhs.turnmode_ctr &&
    lhs.track_angle_err == rhs.track_angle_err &&
    lhs.track_dis_err == rhs.track_dis_err &&
    lhs.aim_range == rhs.aim_range &&
    lhs.steering_property == rhs.steering_property;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pathtrack::track_state_<ContainerAllocator1> & lhs, const ::pathtrack::track_state_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pathtrack

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pathtrack::track_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pathtrack::track_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pathtrack::track_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pathtrack::track_state_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pathtrack::track_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pathtrack::track_state_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pathtrack::track_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "976fb87d357afb82707050b80adee235";
  }

  static const char* value(const ::pathtrack::track_state_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x976fb87d357afb82ULL;
  static const uint64_t static_value2 = 0x707050b80adee235ULL;
};

template<class ContainerAllocator>
struct DataType< ::pathtrack::track_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pathtrack/track_state";
  }

  static const char* value(const ::pathtrack::track_state_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pathtrack::track_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 timestamp\n"
"string stopReason\n"
"int32 self_turn_ctr\n"
"int32 turnmode_ctr\n"
"float32 track_angle_err\n"
"float32 track_dis_err\n"
"float32 aim_range\n"
"float32 steering_property\n"
;
  }

  static const char* value(const ::pathtrack::track_state_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pathtrack::track_state_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.stopReason);
      stream.next(m.self_turn_ctr);
      stream.next(m.turnmode_ctr);
      stream.next(m.track_angle_err);
      stream.next(m.track_dis_err);
      stream.next(m.aim_range);
      stream.next(m.steering_property);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct track_state_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pathtrack::track_state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pathtrack::track_state_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "timestamp: ";
    Printer<int64_t>::stream(s, indent + "  ", v.timestamp);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "stopReason: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.stopReason);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "self_turn_ctr: ";
    Printer<int32_t>::stream(s, indent + "  ", v.self_turn_ctr);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "turnmode_ctr: ";
    Printer<int32_t>::stream(s, indent + "  ", v.turnmode_ctr);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "track_angle_err: ";
    Printer<float>::stream(s, indent + "  ", v.track_angle_err);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "track_dis_err: ";
    Printer<float>::stream(s, indent + "  ", v.track_dis_err);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "aim_range: ";
    Printer<float>::stream(s, indent + "  ", v.aim_range);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "steering_property: ";
    Printer<float>::stream(s, indent + "  ", v.steering_property);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PATHTRACK_MESSAGE_TRACK_STATE_H
