// Generated by gencpp from file car_ctr/car_ctr.msg
// DO NOT EDIT!


#ifndef CAR_CTR_MESSAGE_CAR_CTR_H
#define CAR_CTR_MESSAGE_CAR_CTR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace car_ctr
{
template <class ContainerAllocator>
struct car_ctr_
{
  typedef car_ctr_<ContainerAllocator> Type;

  car_ctr_()
    : enable(0)
    , turnmode(0)
    , speed(0.0)
    , angle(0.0)  {
    }
  car_ctr_(const ContainerAllocator& _alloc)
    : enable(0)
    , turnmode(0)
    , speed(0.0)
    , angle(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _enable_type;
  _enable_type enable;

   typedef int32_t _turnmode_type;
  _turnmode_type turnmode;

   typedef float _speed_type;
  _speed_type speed;

   typedef float _angle_type;
  _angle_type angle;





  typedef boost::shared_ptr< ::car_ctr::car_ctr_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::car_ctr::car_ctr_<ContainerAllocator> const> ConstPtr;

}; // struct car_ctr_

typedef ::car_ctr::car_ctr_<std::allocator<void> > car_ctr;

typedef boost::shared_ptr< ::car_ctr::car_ctr > car_ctrPtr;
typedef boost::shared_ptr< ::car_ctr::car_ctr const> car_ctrConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::car_ctr::car_ctr_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::car_ctr::car_ctr_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::car_ctr::car_ctr_<ContainerAllocator1> & lhs, const ::car_ctr::car_ctr_<ContainerAllocator2> & rhs)
{
  return lhs.enable == rhs.enable &&
    lhs.turnmode == rhs.turnmode &&
    lhs.speed == rhs.speed &&
    lhs.angle == rhs.angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::car_ctr::car_ctr_<ContainerAllocator1> & lhs, const ::car_ctr::car_ctr_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace car_ctr

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::car_ctr::car_ctr_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car_ctr::car_ctr_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_ctr::car_ctr_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_ctr::car_ctr_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_ctr::car_ctr_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_ctr::car_ctr_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::car_ctr::car_ctr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "730d29df159fab35648f2f22bf88d85e";
  }

  static const char* value(const ::car_ctr::car_ctr_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x730d29df159fab35ULL;
  static const uint64_t static_value2 = 0x648f2f22bf88d85eULL;
};

template<class ContainerAllocator>
struct DataType< ::car_ctr::car_ctr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "car_ctr/car_ctr";
  }

  static const char* value(const ::car_ctr::car_ctr_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::car_ctr::car_ctr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 enable\n"
"int32 turnmode    #  0-阿克曼    1-斜行  2-横移模式  4-自转模式  x-差速模式  \n"
"float32 speed\n"
"float32 angle\n"
;
  }

  static const char* value(const ::car_ctr::car_ctr_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::car_ctr::car_ctr_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.enable);
      stream.next(m.turnmode);
      stream.next(m.speed);
      stream.next(m.angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct car_ctr_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::car_ctr::car_ctr_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::car_ctr::car_ctr_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "enable: ";
    Printer<int32_t>::stream(s, indent + "  ", v.enable);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "turnmode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.turnmode);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAR_CTR_MESSAGE_CAR_CTR_H
